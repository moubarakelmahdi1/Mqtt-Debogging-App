{"remainingRequest":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\WEB\\WLDD_hiveMQ\\src\\components\\Selector.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\WEB\\WLDD_hiveMQ\\src\\components\\Selector.vue","mtime":1560777423798},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {config} from '@/assets/js/Utils.js';\nimport axios from 'axios';\nimport $ from 'jquery';\nexport default {\n    name: 'Selector',\n    props:{\n        'demonstrations':Array,\n        'deletePopUp' : Boolean,\n        'editPopUp' : Boolean,\n        'selectedActionIndex' : Number,\n        'showBtn' : Number,\n        'actionPanel' : Number,\n        'userGroups' : Array,\n    },\n    data: function () {\n        return {\n            selected : null,\n            showActionPanel:null,\n            demoIndex : null,\n            actionIndex : this.selectedActionIndex,\n            deleteModal:this.deletePopUp,\n            editModal : this.editPopUp,\n            showButtons : this.showBtn,\n            editDemoPopUp : 0,\n            newDemoName : '',\n            userGroupList : '',\n            deleteDemoPopUp : 0,\n            toImportDemo : '',\n            importConfirmation : 0,\n        }\n    },\n    watch:{\n        selected(){\n            this.$emit('selected',this.selected);\n            this.$emit('showActionPanel',this.showActionPanel);\n            if(this.selected!=null){\n                this.demonstrations.forEach(element =>{\n                    if(element.id==this.selected.id)\n                    {\n                        this.demoIndex = this.demonstrations.indexOf(element);\n                    }\n                })\n            }\n            this.$emit('selectedDemoIndex',this.demoIndex);\n        },\n        showActionPanel(){\n            this.$emit('showActionPanel',this.showActionPanel);\n        },\n        deletePopUp:function(){\n            this.deleteModal = this.deletePopUp;\n        },\n        deleteModal:function(){\n            this.$emit('deletePopUp',this.deleteModal);\n        },\n        editPopUp:function(){\n            this.editModal = this.editPopUp;\n        },\n        editModal:function(){\n            this.$emit('editPopUp',this.editModal);\n        },\n        showButtons:function(){\n            this.$emit('showBtn',this.showButtons);\n        },\n        showBtn:function(){\n            this.showButtons = this.showBtn;\n        },\n        actionIndex:function(){\n            this.$emit('selectedActionIndex',this.actionIndex);\n        },\n        selectedActionIndex:function(){\n            this.actionIndex=this.selectedActionIndex;\n        }\n    },\n    methods: {\n        atInput() {\n            this.showActionPanel = 0;\n            this.actionIndex = null;\n            this.showButtons = 0;\n        },\n        changeSorting(direction) {\n            var temp = null;\n            if(direction=='left'){\n                temp = this.demonstrations[this.demoIndex].action[this.actionIndex-1];\n            }\n            else if(direction=='right'){\n                temp = this.demonstrations[this.demoIndex].action[this.actionIndex+1];\n            }\n            axios\n                .post(config.baseLink+'/action/editActionSorting?actionId='+this.demonstrations[this.demoIndex].action[this.actionIndex].id+'&permutedActionId='+temp.id+'&actionSort='+this.demonstrations[this.demoIndex].action[this.actionIndex].sort+'&permutedActionSort='+temp.sort)\n                .then((responses) =>{\n                    this.$parent.update();\n                    if(direction=='left'){\n                        this.actionIndex = this.actionIndex-1;\n                    }\n                    else if(direction=='right'){\n                        this.actionIndex = this.actionIndex+1;\n                    }\n                }, (response)=>{\n                    console.log('erreur',response)\n                })\n        },\n        showEditDemoPopUp(){\n            if(this.selected!=null){\n                this.newDemoName = this.demonstrations[this.demoIndex].name;\n                this.editDemoPopUp = 1 ;\n            }\n        },\n        cancelEditDemoPopUp(){\n            this.editDemoPopUp = 0;\n            this.newDemoName = '';\n            var items = document.getElementsByClassName('checkboxesInSelector');\n            for (var i = 0; i < items.length; i++) {\n                if (items[i].type == 'checkbox')\n                    items[i].checked = false;\n            }\n            this.$parent.update();\n        },\n        editDemo() {\n            if(this.newDemoName.length>0)\n            {\n                this.userGroups.forEach(userGroup => {\n                    if (userGroup.isSelected == true) {\n                        this.userGroupList = this.userGroupList + userGroup.id + '|';\n                        userGroup.isSelected = false;\n                    }\n                })\n                if(this.userGroupList.length>0)\n                {\n                    axios\n                        .post(config.baseLink + '/demo/editDemo?demoId='+this.demonstrations[this.demoIndex].id+'&name='+encodeURI(this.newDemoName)+'&userGroupsIds='+encodeURI(this.userGroupList))\n                        .then((responses) => {\n                            this.$parent.update();\n                            this.userGroupList = '';\n                            this.selected=null;\n                            this.cancelEditDemoPopUp();\n                        }, (response) => {\n                            console.log('erreur', response)\n                        })\n                }\n                else {\n                    alert('Select demonstration user groups!')\n                }\n\n            }\n            else{\n                alert('Fill demonstration name!')\n            }\n        },\n        showDeleteDemoPopUp(){\n            if(this.selected!=null){\n                this.deleteDemoPopUp = 1;\n            }\n        },\n        deleteDemo(){\n            axios\n                .post(config.baseLink + '/demo/deleteDemo?demoId=' + this.demonstrations[this.demoIndex].id)\n                .then((responses) => {\n                    this.$parent.update();\n                    this.selected = null;\n                    this.deleteDemoPopUp = 0;\n                    this.editDemoPopUp = 0;\n                }, (response) => {\n                    console.log('erreur', response)\n                })\n        },\n        exportDemo(){\n            axios\n                .get(config.baseLink +'/demo/getDemo?demoId='+ this.demonstrations[this.demoIndex].id)\n                .then((responses) => {\n                    let dataStr = JSON.stringify(responses.data);\n                    let dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n\n                    let exportFileDefaultName = this.demonstrations[this.demoIndex].name+'.json';\n\n                    let linkElement = document.createElement('a');\n                    linkElement.setAttribute('href', dataUri);\n                    linkElement.setAttribute('download', exportFileDefaultName);\n                    linkElement.click();\n                }, (response) => {\n                    console.log('erreur', response)\n                })\n        },\n        importDemo(event){\n            var reader = new FileReader();\n            reader.onload = function(event) {\n                var jsonObj = JSON.parse(event.target.result);\n                axios\n                    .post(config.baseLink + '/demo/importDemo?demoJson=' + encodeURI(JSON.stringify(jsonObj)))\n                    .then((responses) => {\n                        this.importConfirmation = 0;\n                    }, (response) => {\n                        console.log('erreur', response)\n                    })\n            }\n            reader.readAsText(event.target.files[0]);\n            event.target.value = '';\n            this.importConfirmation = 1;\n        }\n    }\n}\n",{"version":3,"sources":["Selector.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"Selector.vue","sourceRoot":"src/components","sourcesContent":["<!--Drop down menu to select the demonstration-->\r\n<template>\r\n    <v-flex md3>\r\n        <v-select solo\r\n                  v-model=\"selected\"\r\n                  :items=\"demonstrations\"\r\n                  item-text=\"name\"\r\n                  label=\"Demonstrations\"\r\n                  class=\"strongTexts\"\r\n                  return-object\r\n                  @input=\"atInput()\"\r\n                  prepend-icon=\"build\"\r\n                  @click:prepend=\"showEditDemoPopUp()\"\r\n        ></v-select>\r\n\r\n        <div v-if=\"selectedActionIndex!=null&&showButtons&&actionPanel!=null&&demonstrations[demoIndex].action.length>0\" class=\"editButtons\">\r\n            <v-btn\r\n                    small class=\"button\"\r\n                   color=rgba(0,103,160,1)\r\n                   @click=\"editModal=true\">\r\n                <div class=\"button\">EDIT</div>\r\n            </v-btn>\r\n\r\n            <v-btn small class=\"button\"\r\n                   color=rgba(0,103,160,1)\r\n                   @click=\"deleteModal=true\">\r\n                <div class=\"button\">DELETE</div>\r\n            </v-btn>\r\n        </div>\r\n\r\n        <br>\r\n\r\n        <div v-if=\"selectedActionIndex!=null&&showButtons&&actionPanel!=null&&demonstrations[demoIndex].action.length>0\" class=\"editButtons\">\r\n            <v-btn  v-if=\"actionIndex!=0\"\r\n                    small class=\"button\"\r\n                    color=rgba(0,103,160,1)\r\n                    @click=\"changeSorting('left')\">\r\n                <div class=\"button\"><</div>\r\n            </v-btn>\r\n\r\n            <v-btn  v-if=\"actionIndex<demonstrations[demoIndex].action.length-1\"\r\n                    small class=\"button\"\r\n                    color=rgba(0,103,160,1)\r\n                    @click=\"changeSorting('right')\">\r\n                <div class=\"button\">></div>\r\n            </v-btn>\r\n        </div>\r\n\r\n        <v-dialog\r\n                v-model=\"editDemoPopUp\"\r\n                width=\"700\"\r\n                persistent=\"\">\r\n            <template v-slot:activator=\"{ on }\">\r\n\r\n            </template>\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    <div class=\"editDemo\">\r\n                        Edit demonstration:\r\n                    </div>\r\n                    <v-spacer></v-spacer>\r\n                    <div class=\"editDemo\">Import</div>\r\n                    <v-btn fab small color=\"rgba(0,103,160,1)\" @click=\"$refs.inputUpload.click()\">\r\n\r\n                        <v-icon color=\"white\">\r\n                            cloud_upload\r\n                        </v-icon>\r\n                    </v-btn>\r\n                    <input type=\"file\"\r\n                           ref=\"inputUpload\"\r\n                           id=\"jsonDemo\" name=\"jsonDemo\"\r\n                           accept=\".json\"\r\n                           v-show=\"false\"\r\n                           @change=\"importDemo($event)\">\r\n\r\n                    <div class=\"editDemo\">Export</div>\r\n                    <v-btn fab small color=\"rgba(0,103,160,1)\" @click=\"exportDemo()\">\r\n                        <v-icon color=\"white\">\r\n                            cloud_download\r\n                        </v-icon>\r\n                    </v-btn>\r\n                    <div class=\"editDemo\">Delete</div>\r\n                    <v-btn fab small color=\"rgba(0,103,160,1)\" @click=\"showDeleteDemoPopUp()\">\r\n                        <v-icon color=\"white\">\r\n                            remove\r\n                        </v-icon>\r\n                    </v-btn>\r\n                </v-card-title>\r\n\r\n                <v-form @submit.prevent>\r\n                    <v-text-field\r\n                            label=\"Demonstration Name\"\r\n                            v-model=\"newDemoName\"\r\n                            box>\r\n                    </v-text-field>\r\n\r\n                    <div class=\"userGroups\">\r\n                        <v-flex v-for=\"userGroup in userGroups\" offset-md1 offset-xs1>\r\n                            <!--Checkboxes to select certain topics-->\r\n                            <input @click=\"userGroup.isSelected=!userGroup.isSelected\" type=\"checkbox\" :id=\"userGroup.id+10\" class=\"checkboxesInSelector\">\r\n                            <div slot=\"label\">\r\n                                {{userGroup.name}}\r\n                            </div>\r\n                        </v-flex>\r\n                    </div>\r\n\r\n                    <v-card-actions>\r\n                        <v-btn color=\"primary\"\r\n                               flat\r\n                               @click=\"cancelEditDemoPopUp()\">\r\n                            Cancel\r\n                        </v-btn>\r\n\r\n                        <v-spacer></v-spacer>\r\n\r\n                        <v-btn  color=\"primary\"\r\n                                flat\r\n                                @click=\"editDemo()\">\r\n                            Save\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </v-form>\r\n            </v-card>\r\n        </v-dialog>\r\n\r\n        <v-dialog v-model=\"deleteDemoPopUp\"\r\n                  width=\"550\">\r\n            <template v-slot:activator=\"{ on }\">\r\n\r\n            </template>\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    WARNING : Are you sure to delete the demonstration :\r\n                </v-card-title>\r\n\r\n                <v-card-actions>\r\n                    <v-btn\r\n                            color=\"primary\"\r\n                            flat\r\n                            @click=\"deleteDemoPopUp=0\">\r\n                        NO\r\n                    </v-btn>\r\n\r\n                    <v-spacer></v-spacer>\r\n                    <v-btn\r\n                            color=\"primary\"\r\n                            flat\r\n                            @click=\"deleteDemo()\">\r\n                        YES\r\n                    </v-btn>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-dialog>\r\n\r\n        <v-dialog v-model=\"importConfirmation\"\r\n                  width=\"550\">\r\n            <template v-slot:activator=\"{ on }\">\r\n\r\n            </template>\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    Demonstration Imported!\r\n                </v-card-title>\r\n\r\n                <v-card-actions>\r\n                    <v-btn\r\n                            color=\"primary\"\r\n                            flat\r\n                            @click=\"importConfirmation=0\">\r\n                        Close\r\n                    </v-btn>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-dialog>\r\n\r\n    </v-flex>\r\n</template>\r\n\r\n<script>\r\n    import {config} from '@/assets/js/Utils.js';\r\n    import axios from 'axios';\r\n    import $ from 'jquery';\r\n    export default {\r\n        name: 'Selector',\r\n        props:{\r\n            'demonstrations':Array,\r\n            'deletePopUp' : Boolean,\r\n            'editPopUp' : Boolean,\r\n            'selectedActionIndex' : Number,\r\n            'showBtn' : Number,\r\n            'actionPanel' : Number,\r\n            'userGroups' : Array,\r\n        },\r\n        data: function () {\r\n            return {\r\n                selected : null,\r\n                showActionPanel:null,\r\n                demoIndex : null,\r\n                actionIndex : this.selectedActionIndex,\r\n                deleteModal:this.deletePopUp,\r\n                editModal : this.editPopUp,\r\n                showButtons : this.showBtn,\r\n                editDemoPopUp : 0,\r\n                newDemoName : '',\r\n                userGroupList : '',\r\n                deleteDemoPopUp : 0,\r\n                toImportDemo : '',\r\n                importConfirmation : 0,\r\n            }\r\n        },\r\n        watch:{\r\n            selected(){\r\n                this.$emit('selected',this.selected);\r\n                this.$emit('showActionPanel',this.showActionPanel);\r\n                if(this.selected!=null){\r\n                    this.demonstrations.forEach(element =>{\r\n                        if(element.id==this.selected.id)\r\n                        {\r\n                            this.demoIndex = this.demonstrations.indexOf(element);\r\n                        }\r\n                    })\r\n                }\r\n                this.$emit('selectedDemoIndex',this.demoIndex);\r\n            },\r\n            showActionPanel(){\r\n                this.$emit('showActionPanel',this.showActionPanel);\r\n            },\r\n            deletePopUp:function(){\r\n                this.deleteModal = this.deletePopUp;\r\n            },\r\n            deleteModal:function(){\r\n                this.$emit('deletePopUp',this.deleteModal);\r\n            },\r\n            editPopUp:function(){\r\n                this.editModal = this.editPopUp;\r\n            },\r\n            editModal:function(){\r\n                this.$emit('editPopUp',this.editModal);\r\n            },\r\n            showButtons:function(){\r\n                this.$emit('showBtn',this.showButtons);\r\n            },\r\n            showBtn:function(){\r\n                this.showButtons = this.showBtn;\r\n            },\r\n            actionIndex:function(){\r\n                this.$emit('selectedActionIndex',this.actionIndex);\r\n            },\r\n            selectedActionIndex:function(){\r\n                this.actionIndex=this.selectedActionIndex;\r\n            }\r\n        },\r\n        methods: {\r\n            atInput() {\r\n                this.showActionPanel = 0;\r\n                this.actionIndex = null;\r\n                this.showButtons = 0;\r\n            },\r\n            changeSorting(direction) {\r\n                var temp = null;\r\n                if(direction=='left'){\r\n                    temp = this.demonstrations[this.demoIndex].action[this.actionIndex-1];\r\n                }\r\n                else if(direction=='right'){\r\n                    temp = this.demonstrations[this.demoIndex].action[this.actionIndex+1];\r\n                }\r\n                axios\r\n                    .post(config.baseLink+'/action/editActionSorting?actionId='+this.demonstrations[this.demoIndex].action[this.actionIndex].id+'&permutedActionId='+temp.id+'&actionSort='+this.demonstrations[this.demoIndex].action[this.actionIndex].sort+'&permutedActionSort='+temp.sort)\r\n                    .then((responses) =>{\r\n                        this.$parent.update();\r\n                        if(direction=='left'){\r\n                            this.actionIndex = this.actionIndex-1;\r\n                        }\r\n                        else if(direction=='right'){\r\n                            this.actionIndex = this.actionIndex+1;\r\n                        }\r\n                    }, (response)=>{\r\n                        console.log('erreur',response)\r\n                    })\r\n            },\r\n            showEditDemoPopUp(){\r\n                if(this.selected!=null){\r\n                    this.newDemoName = this.demonstrations[this.demoIndex].name;\r\n                    this.editDemoPopUp = 1 ;\r\n                }\r\n            },\r\n            cancelEditDemoPopUp(){\r\n                this.editDemoPopUp = 0;\r\n                this.newDemoName = '';\r\n                var items = document.getElementsByClassName('checkboxesInSelector');\r\n                for (var i = 0; i < items.length; i++) {\r\n                    if (items[i].type == 'checkbox')\r\n                        items[i].checked = false;\r\n                }\r\n                this.$parent.update();\r\n            },\r\n            editDemo() {\r\n                if(this.newDemoName.length>0)\r\n                {\r\n                    this.userGroups.forEach(userGroup => {\r\n                        if (userGroup.isSelected == true) {\r\n                            this.userGroupList = this.userGroupList + userGroup.id + '|';\r\n                            userGroup.isSelected = false;\r\n                        }\r\n                    })\r\n                    if(this.userGroupList.length>0)\r\n                    {\r\n                        axios\r\n                            .post(config.baseLink + '/demo/editDemo?demoId='+this.demonstrations[this.demoIndex].id+'&name='+encodeURI(this.newDemoName)+'&userGroupsIds='+encodeURI(this.userGroupList))\r\n                            .then((responses) => {\r\n                                this.$parent.update();\r\n                                this.userGroupList = '';\r\n                                this.selected=null;\r\n                                this.cancelEditDemoPopUp();\r\n                            }, (response) => {\r\n                                console.log('erreur', response)\r\n                            })\r\n                    }\r\n                    else {\r\n                        alert('Select demonstration user groups!')\r\n                    }\r\n\r\n                }\r\n                else{\r\n                    alert('Fill demonstration name!')\r\n                }\r\n            },\r\n            showDeleteDemoPopUp(){\r\n                if(this.selected!=null){\r\n                    this.deleteDemoPopUp = 1;\r\n                }\r\n            },\r\n            deleteDemo(){\r\n                axios\r\n                    .post(config.baseLink + '/demo/deleteDemo?demoId=' + this.demonstrations[this.demoIndex].id)\r\n                    .then((responses) => {\r\n                        this.$parent.update();\r\n                        this.selected = null;\r\n                        this.deleteDemoPopUp = 0;\r\n                        this.editDemoPopUp = 0;\r\n                    }, (response) => {\r\n                        console.log('erreur', response)\r\n                    })\r\n            },\r\n            exportDemo(){\r\n                axios\r\n                    .get(config.baseLink +'/demo/getDemo?demoId='+ this.demonstrations[this.demoIndex].id)\r\n                    .then((responses) => {\r\n                        let dataStr = JSON.stringify(responses.data);\r\n                        let dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\r\n\r\n                        let exportFileDefaultName = this.demonstrations[this.demoIndex].name+'.json';\r\n\r\n                        let linkElement = document.createElement('a');\r\n                        linkElement.setAttribute('href', dataUri);\r\n                        linkElement.setAttribute('download', exportFileDefaultName);\r\n                        linkElement.click();\r\n                    }, (response) => {\r\n                        console.log('erreur', response)\r\n                    })\r\n            },\r\n            importDemo(event){\r\n                var reader = new FileReader();\r\n                reader.onload = function(event) {\r\n                    var jsonObj = JSON.parse(event.target.result);\r\n                    axios\r\n                        .post(config.baseLink + '/demo/importDemo?demoJson=' + encodeURI(JSON.stringify(jsonObj)))\r\n                        .then((responses) => {\r\n                            this.importConfirmation = 0;\r\n                        }, (response) => {\r\n                            console.log('erreur', response)\r\n                        })\r\n                }\r\n                reader.readAsText(event.target.files[0]);\r\n                event.target.value = '';\r\n                this.importConfirmation = 1;\r\n            }\r\n        }\r\n    }\r\n</script>"]}]}