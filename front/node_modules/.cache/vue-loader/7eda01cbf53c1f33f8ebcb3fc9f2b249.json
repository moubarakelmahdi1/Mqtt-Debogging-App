{"remainingRequest":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\WEB\\WLDD_hiveMQ\\src\\components\\SubscribePanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\WEB\\WLDD_hiveMQ\\src\\components\\SubscribePanel.vue","mtime":1560871104449},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nconst matchAll = require(\"match-all\");\nvar HashMap = require('hashmap');\nimport {subscribeMQTT} from '@/assets/js/Utils.js';\n\nexport default {\n    name: 'SubscribePanel',\n    props: {\n        'demonstrations': Array,\n        'subscribedTopics' : Array,\n        'selectedDemoIndex': Number,\n        'oldValuesTab' : Array\n    },\n    data: function () {\n        return {\n            popUpSubscribe: 0,\n            parametersMap: new HashMap(),\n            topicOriginal: '',\n            topicSubscribe: '',\n            addTopic : 0,\n            newTopicSubscription : '',\n            defaultMap: new HashMap(),\n            topicSubscribed : [],\n            oldValues : [{\"key\":\"{{test}}\",\"value\":\"{{test}}\"}],\n        }\n    },\n    watch:{\n      topicSubscribed:function(){\n          this.$emit('subscribedTopics',this.topicSubscribed);\n      },\n      selectedDemoIndex:function(){\n          var items = document.getElementsByClassName('checkboxes');\n          for (var i = 0; i < items.length; i++) {\n              if (items[i].type == 'checkbox')\n                  items[i].checked = false;\n          }\n      },\n      oldValues:function(){\n          this.$emit('oldValuesTab',this.oldValues);\n      },\n      oldValuesTab:function(){\n          this.oldValues = this.oldValuesTab;\n      }\n    },\n    methods: {\n        //Permits to replace parameters\n        replaceText() {\n            for (var i = 0; i < this.parametersMap.size; i++) {\n                this.demonstrations.some(element => {\n                    element.action.forEach(act =>{\n                        if (act.topicOriginal == this.topicOriginal) {\n                            act.topicSubscribe = this.topicSubscribe.replace(this.parametersMap.keys()[i], this.parametersMap.values()[i]);\n                            this.topicSubscribe = act.topicSubscribe;\n                        }\n                    })\n                });\n                var temp = new Object();\n                var res=1;\n                temp.key = this.parametersMap.keys()[i];\n                temp.value = this.parametersMap.values()[i];\n                for(var j=0;j<this.oldValues.length;j++){\n                    if(this.oldValues[i].key==temp.key){\n                        this.oldValues[i].value = this.parametersMap.values()[i];\n                        res=0;\n                    }\n                }\n                if(res){\n                    this.oldValues.push(temp);\n                }\n            }\n            this.popUpSubscribe = 0;\n            this.parametersMap = new HashMap();\n            this.defaultMap = new HashMap();\n        },\n\n        //Permits to show parameters popUp for the topic we want to subscribe at\n        showPopUpSubscribe(action) {\n            if(!document.getElementById(action.name).checked==false)\n            {\n                action.isSelected = true;\n                document.getElementById(action.name).checked = true;\n                const regex = /{{([a-zA-Z0-9]*)}}/gm;\n                this.topicSubscribe = action.topicOriginal;\n                this.topicOriginal = action.topicOriginal;\n                action.topicSubscribe = action.topicOriginal;\n                let matches = matchAll(action.topicOriginal,regex).toArray();\n                for (var i=0; i < matches.length; i++) {\n                    this.parametersMap.set('{{'+matches[i]+'}}','{{'+ matches[i]+'}}');\n                    this.defaultMap.set('{{'+matches[i]+'}}', action.parametersTopics.filter(element => element.parameter =='{{'+matches[i]+'}}')[0].parameterDefaultValue);\n                }\n                if(this.parametersMap.size>0)\n                {\n                    this.popUpSubscribe = 1;\n                }\n            }\n            else{\n                document.getElementById(action.name).checked = false;\n                action.isSelected = false;\n\n            }\n        },\n\n        //Permits to subscribe to a topic\n        subscribeTopic() {\n            this.demonstrations[this.selectedDemoIndex].action.forEach((action) => {\n                if (action.isSelected) {\n                    subscribeMQTT(action.topicSubscribe);\n                    var res = 0;\n                    this.topicSubscribed.find(function(element){\n                        if(element == action.topicSubscribe){\n                            res = 1;\n                        }\n                        return res;\n                    })\n                    if(!res){\n                        this.topicSubscribed.push(action.topicSubscribe);\n                    }else{\n                        console.log('coucou')\n                    }\n                }\n                action.isSelected = false;\n                document.getElementById(action.name).checked = false;\n            })\n        },\n\n        subscribeNewTopic(){\n            if(this.newTopicSubscription.length>0)\n            {\n                var res = 0;\n                var newTopic = this.newTopicSubscription;\n                if(newTopic!='')\n                {\n                    this.topicSubscribed.find(function(element){\n                        if(element == newTopic){\n                            res = 1;\n                        }\n                        return res;\n                    })\n                    if(!res){\n                        this.topicSubscribed.push(newTopic);\n                    }\n                    subscribeMQTT(this.newTopicSubscription);\n                }\n                this.cancelNewTopicSubscribtion();\n            }\n            else{\n                alert('Fill new topic name!');\n            }\n        },\n\n        setDefaultValue(index) {\n            this.parametersMap.set(this.parametersMap.keys()[index-1], this.defaultMap.values()[index-1]);\n                this.$refs.parameterContentTopic[index-1].value=this.defaultMap.values()[index-1];\n        },\n\n        setValue(index,$event){\n            this.parametersMap.set(this.parametersMap.keys()[index-1],$event);\n                this.$refs.parameterContentTopic[index-1].value=$event;\n        },\n\n        cancelNewTopicSubscribtion(){\n            this.newTopicSubscription = '';\n            this.addTopic = 0;\n        },\n        setOldValue(type,index) {\n            var temp=this.findOldValue(index);\n            this.parametersMap.set(this.parametersMap.keys()[index-1],temp );\n                this.$refs.parameterContentTopic[index-1].value=temp;\n        },\n        findOldValue(index){\n            var temp='';\n            for(var i=0;i<this.oldValues.length;i++){\n                if(this.oldValues[i].key==this.parametersMap.keys()[index-1]){\n                    temp = this.oldValues[i].value;\n                    this.parametersMap.set(this.oldValues[i].key,temp);\n                }\n            }\n            return temp;\n        }\n    }\n}\n",{"version":3,"sources":["SubscribePanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkJA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SubscribePanel.vue","sourceRoot":"src/components","sourcesContent":["<!--Subscribe panel permitting to subscribe to certain topics and receive message from them-->\r\n<template>\r\n    <v-flex offset-xs1>\r\n        <v-flex>\r\n            <v-expansion-panel v-if=\"demonstrations[selectedDemoIndex]!=null\">\r\n                <v-expansion-panel-content>\r\n                    <template v-slot:header>\r\n                        <div class=\"strongTexts\">Subscribe</div>\r\n                    </template>\r\n\r\n                    <v-card>\r\n                        <div class=\"subscribesGroup\">\r\n                            <v-flex v-for=\"action in demonstrations[selectedDemoIndex].action\"\r\n                                    md4\r\n                                    xs-4\r\n                                    offset-xs1\r\n                                    offset-md1>\r\n\r\n                                <br>\r\n\r\n                                <v-flex>\r\n                                        <input @click=\"showPopUpSubscribe(action)\" type=\"checkbox\" :id=\"action.name\" class=\"checkboxes\">\r\n                                </v-flex>\r\n\r\n                                <label class=\"subscribeLabels\">{{action.name}}</label>\r\n\r\n                            </v-flex>\r\n\r\n                            <v-flex>\r\n                                <!--Subscribe button permitting to subscribe to the topics selected by the user-->\r\n                                <v-btn class=\"subscribeButton\"\r\n                                       color=rgba(0,103,160,1)\r\n                                       @click=\"subscribeTopic()\">\r\n                                    <div class=\"button\">Subscribe</div>\r\n                                </v-btn>\r\n\r\n                                <v-btn class=\"subscribeButton\"\r\n                                       color=rgba(0,103,160,1)\r\n                                       @click=\"addTopic = 1\">\r\n                                    <div class=\"button\">Add Topic Subscribtion</div>\r\n                                </v-btn>\r\n                            </v-flex>\r\n                        </div>\r\n                    </v-card>\r\n                </v-expansion-panel-content>\r\n            </v-expansion-panel>\r\n        </v-flex>\r\n\r\n        <v-dialog\r\n                v-model=\"popUpSubscribe\"\r\n                width=\"500\"\r\n                persistent=\"\">\r\n            <template v-slot:activator=\"{ on }\">\r\n\r\n            </template>\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    Fill parameters for Topic\r\n                </v-card-title>\r\n\r\n                </br>\r\n\r\n                <v-form @submit.prevent>\r\n                    <v-flex d-flex\r\n                            v-for=\"index in parametersMap.size\">\r\n                        <v-flex md3 offset-md1 offset-xs1>\r\n                            <div class=\"parameters\">\r\n                                {{parametersMap.keys()[index-1]}}\r\n                            </div>\r\n                        </v-flex>\r\n                        <v-flex md8 d-flex>\r\n                            <v-text-field\r\n                                    ref=\"parameterContentTopic\"\r\n                                    @change=\"setValue(index,$event)\"\r\n                                    :value=\"findOldValue(index)\"\r\n                                    solo>\r\n                            </v-text-field>\r\n                            <div class=\"defaultValuebutton\">\r\n                                <v-tooltip top>\r\n                                    <template v-slot:activator=\"{ on }\">\r\n                                        <v-btn fab small @click=\"setDefaultValue(index)\" v-on=\"on\">\r\n                                            <v-icon dark>build</v-icon>\r\n                                        </v-btn>\r\n                                    </template>\r\n                                    <span>{{defaultMap.values()[index-1]}}</span>\r\n                                </v-tooltip>\r\n                            </div>\r\n                        </v-flex>\r\n                    </v-flex>\r\n\r\n                    <v-card-actions>\r\n                        <v-spacer></v-spacer>\r\n\r\n                        <v-btn  type=\"submit\"\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"replaceText()\">\r\n                            Apply\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </v-form>\r\n            </v-card>\r\n        </v-dialog>\r\n\r\n        <v-dialog\r\n                v-model=\"addTopic\"\r\n                width=\"500\"\r\n                persistent=\"\">\r\n            <template v-slot:activator=\"{ on }\">\r\n\r\n            </template>\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    Enter topic\r\n                </v-card-title>\r\n\r\n                <v-text-field v-model=\"newTopicSubscription\"\r\n                              label=\"Topic\"\r\n                              solo>\r\n                </v-text-field>\r\n\r\n                <v-card-actions>\r\n                    <v-btn color=\"primary\"\r\n                           flat\r\n                           @click=\"cancelNewTopicSubscribtion()\">\r\n                        Cancel\r\n                    </v-btn>\r\n\r\n                    <v-spacer></v-spacer>\r\n\r\n                    <v-btn  color=\"primary\"\r\n                            flat\r\n                            @click=\"subscribeNewTopic()\">\r\n                        Add\r\n                    </v-btn>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-dialog>\r\n    </v-flex>\r\n</template>\r\n\r\n<script>\r\n    const matchAll = require(\"match-all\");\r\n    var HashMap = require('hashmap');\r\n    import {subscribeMQTT} from '@/assets/js/Utils.js';\r\n\r\n    export default {\r\n        name: 'SubscribePanel',\r\n        props: {\r\n            'demonstrations': Array,\r\n            'subscribedTopics' : Array,\r\n            'selectedDemoIndex': Number,\r\n            'oldValuesTab' : Array\r\n        },\r\n        data: function () {\r\n            return {\r\n                popUpSubscribe: 0,\r\n                parametersMap: new HashMap(),\r\n                topicOriginal: '',\r\n                topicSubscribe: '',\r\n                addTopic : 0,\r\n                newTopicSubscription : '',\r\n                defaultMap: new HashMap(),\r\n                topicSubscribed : [],\r\n                oldValues : [{\"key\":\"{{test}}\",\"value\":\"{{test}}\"}],\r\n            }\r\n        },\r\n        watch:{\r\n          topicSubscribed:function(){\r\n              this.$emit('subscribedTopics',this.topicSubscribed);\r\n          },\r\n          selectedDemoIndex:function(){\r\n              var items = document.getElementsByClassName('checkboxes');\r\n              for (var i = 0; i < items.length; i++) {\r\n                  if (items[i].type == 'checkbox')\r\n                      items[i].checked = false;\r\n              }\r\n          },\r\n          oldValues:function(){\r\n              this.$emit('oldValuesTab',this.oldValues);\r\n          },\r\n          oldValuesTab:function(){\r\n              this.oldValues = this.oldValuesTab;\r\n          }\r\n        },\r\n        methods: {\r\n            //Permits to replace parameters\r\n            replaceText() {\r\n                for (var i = 0; i < this.parametersMap.size; i++) {\r\n                    this.demonstrations.some(element => {\r\n                        element.action.forEach(act =>{\r\n                            if (act.topicOriginal == this.topicOriginal) {\r\n                                act.topicSubscribe = this.topicSubscribe.replace(this.parametersMap.keys()[i], this.parametersMap.values()[i]);\r\n                                this.topicSubscribe = act.topicSubscribe;\r\n                            }\r\n                        })\r\n                    });\r\n                    var temp = new Object();\r\n                    var res=1;\r\n                    temp.key = this.parametersMap.keys()[i];\r\n                    temp.value = this.parametersMap.values()[i];\r\n                    for(var j=0;j<this.oldValues.length;j++){\r\n                        if(this.oldValues[i].key==temp.key){\r\n                            this.oldValues[i].value = this.parametersMap.values()[i];\r\n                            res=0;\r\n                        }\r\n                    }\r\n                    if(res){\r\n                        this.oldValues.push(temp);\r\n                    }\r\n                }\r\n                this.popUpSubscribe = 0;\r\n                this.parametersMap = new HashMap();\r\n                this.defaultMap = new HashMap();\r\n            },\r\n\r\n            //Permits to show parameters popUp for the topic we want to subscribe at\r\n            showPopUpSubscribe(action) {\r\n                if(!document.getElementById(action.name).checked==false)\r\n                {\r\n                    action.isSelected = true;\r\n                    document.getElementById(action.name).checked = true;\r\n                    const regex = /{{([a-zA-Z0-9]*)}}/gm;\r\n                    this.topicSubscribe = action.topicOriginal;\r\n                    this.topicOriginal = action.topicOriginal;\r\n                    action.topicSubscribe = action.topicOriginal;\r\n                    let matches = matchAll(action.topicOriginal,regex).toArray();\r\n                    for (var i=0; i < matches.length; i++) {\r\n                        this.parametersMap.set('{{'+matches[i]+'}}','{{'+ matches[i]+'}}');\r\n                        this.defaultMap.set('{{'+matches[i]+'}}', action.parametersTopics.filter(element => element.parameter =='{{'+matches[i]+'}}')[0].parameterDefaultValue);\r\n                    }\r\n                    if(this.parametersMap.size>0)\r\n                    {\r\n                        this.popUpSubscribe = 1;\r\n                    }\r\n                }\r\n                else{\r\n                    document.getElementById(action.name).checked = false;\r\n                    action.isSelected = false;\r\n\r\n                }\r\n            },\r\n\r\n            //Permits to subscribe to a topic\r\n            subscribeTopic() {\r\n                this.demonstrations[this.selectedDemoIndex].action.forEach((action) => {\r\n                    if (action.isSelected) {\r\n                        subscribeMQTT(action.topicSubscribe);\r\n                        var res = 0;\r\n                        this.topicSubscribed.find(function(element){\r\n                            if(element == action.topicSubscribe){\r\n                                res = 1;\r\n                            }\r\n                            return res;\r\n                        })\r\n                        if(!res){\r\n                            this.topicSubscribed.push(action.topicSubscribe);\r\n                        }else{\r\n                            console.log('coucou')\r\n                        }\r\n                    }\r\n                    action.isSelected = false;\r\n                    document.getElementById(action.name).checked = false;\r\n                })\r\n            },\r\n\r\n            subscribeNewTopic(){\r\n                if(this.newTopicSubscription.length>0)\r\n                {\r\n                    var res = 0;\r\n                    var newTopic = this.newTopicSubscription;\r\n                    if(newTopic!='')\r\n                    {\r\n                        this.topicSubscribed.find(function(element){\r\n                            if(element == newTopic){\r\n                                res = 1;\r\n                            }\r\n                            return res;\r\n                        })\r\n                        if(!res){\r\n                            this.topicSubscribed.push(newTopic);\r\n                        }\r\n                        subscribeMQTT(this.newTopicSubscription);\r\n                    }\r\n                    this.cancelNewTopicSubscribtion();\r\n                }\r\n                else{\r\n                    alert('Fill new topic name!');\r\n                }\r\n            },\r\n\r\n            setDefaultValue(index) {\r\n                this.parametersMap.set(this.parametersMap.keys()[index-1], this.defaultMap.values()[index-1]);\r\n                    this.$refs.parameterContentTopic[index-1].value=this.defaultMap.values()[index-1];\r\n            },\r\n\r\n            setValue(index,$event){\r\n                this.parametersMap.set(this.parametersMap.keys()[index-1],$event);\r\n                    this.$refs.parameterContentTopic[index-1].value=$event;\r\n            },\r\n\r\n            cancelNewTopicSubscribtion(){\r\n                this.newTopicSubscription = '';\r\n                this.addTopic = 0;\r\n            },\r\n            setOldValue(type,index) {\r\n                var temp=this.findOldValue(index);\r\n                this.parametersMap.set(this.parametersMap.keys()[index-1],temp );\r\n                    this.$refs.parameterContentTopic[index-1].value=temp;\r\n            },\r\n            findOldValue(index){\r\n                var temp='';\r\n                for(var i=0;i<this.oldValues.length;i++){\r\n                    if(this.oldValues[i].key==this.parametersMap.keys()[index-1]){\r\n                        temp = this.oldValues[i].value;\r\n                        this.parametersMap.set(this.oldValues[i].key,temp);\r\n                    }\r\n                }\r\n                return temp;\r\n            }\r\n        }\r\n    }\r\n</script>"]}]}