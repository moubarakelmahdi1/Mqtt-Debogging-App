{"remainingRequest":"C:\\Projet Info\\Projet Worldline\\wldd_hivemq\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Projet Info\\Projet Worldline\\wldd_hivemq\\src\\components\\ActionPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Projet Info\\Projet Worldline\\wldd_hivemq\\src\\components\\ActionPanel.vue","mtime":1562681612080},{"path":"C:\\Projet Info\\Projet Worldline\\wldd_hivemq\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Projet Info\\Projet Worldline\\wldd_hivemq\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Projet Info\\Projet Worldline\\wldd_hivemq\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\Projet Info\\Projet Worldline\\wldd_hivemq\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Projet Info\\Projet Worldline\\wldd_hivemq\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {config} from '@/assets/js/Utils.js';\nimport axios from 'axios';\nvar HashMap = require('hashmap');\n\n\nexport default {\n    name: 'ActionPanel',\n    props:{\n        'actionPanel':Number,\n        'selected': Object,\n        'deletePopUp' : Boolean,\n        'editPopUp' : Boolean,\n        'demonstrations': Array,\n        'selectedActionIndex': Number,\n        'selectedDemoIndex': Number,\n    },\n    data:function(){\n        return {\n            showActionPanel : this.actionPanel,\n            deleteModal:this.deletePopUp,\n            actionName:null,\n            actionId:null,\n            editModal : this.editPopUp,\n            newActionName:'',\n            newActionTopic:'',\n            newActionMessage:'',\n            parametersMap: new HashMap(),  //Hashmap with all the parameters\n            parametersIds: new HashMap(), //Hashmap with parameters Id's\n            popUpMessage: 0,//popUp for filling message parameters of the action that wa are editing\n            popUpTopic: 0,  //popUp for filling topic parameters of the action that wa are editing\n            newDefaultValues:[],  //new default values of the action that we are editing\n            actionIndex : this.selectedActionIndex,  //index of the selected action\n\n            tempParameters : [],                 //copy of default values for the action that we want to edit\n            importConfirmation : 0,\n        }\n    },\n    watch:{\n        actionPanel:function(){\n            this.showActionPanel = this.actionPanel;\n        },\n        selected:function(){\n            this.showActionPanel = 0;\n        },\n        deletePopUp:function(){\n            this.deleteModal = this.deletePopUp;\n        },\n        deleteModal:function(){\n            this.$emit('deletePopUp',this.deleteModal);\n        },\n        editPopUp:function(){\n            this.editModal = this.editPopUp;\n            if(this.editModal==true)\n            {\n                this.newActionName = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].name;\n                this.newActionTopic = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].topicOriginal;\n                this.newActionMessage = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].messageOriginal;\n            }\n        },\n        editModal:function(){\n            this.$emit('editPopUp',this.editModal);\n        },\n        showActionPanel:function(){\n            this.$emit('actionPanel',this.showActionPanel);\n        },\n        selectedActionIndex:function(){\n            this.actionIndex = this.selectedActionIndex;\n        },\n        actionIndex:function(){\n            this.$emit('selectedActionIndex',this.actionIndex);\n        }\n    },\n    methods: {\n        //permits to select an action\n        assignTopic(action) {\n            this.actionName = action.name;\n            this.actionId = action.id;\n            this.$parent.assignTopic(action);\n            this.newActionName = action.name;\n            this.newActionTopic = action.topic;\n            this.newActionMessage = action.message;\n        },\n        //permits to delete an action\n        deleteAction() {\n            axios\n                .post(config.baseLink + '/action/deleteAction?actionId=' + this.actionId)\n                .then((responses) => {\n                    this.$parent.update();\n                    this.deleteModal = false;\n                    this.newActionName = '';\n                    this.newActionMessage = '';\n                    this.newActionTopic = '';\n                    this.actionIndex = null;\n                }, (response) => {\n                    console.log('erreur', response)\n                })\n        },\n        //Permits to Add a new action for a demonstration\n        editAction() {\n            if(this.newActionName!=''&&this.newActionTopic!='')\n            {\n                axios\n                    .post(config.baseLink + '/action/editAction?actionId=' + this.actionId + '&name=' + encodeURI(this.newActionName) + '&topic=' + encodeURI(this.newActionTopic) + '&message=' + encodeURI(this.newActionMessage)+'&lastEditionId='+localStorage.getItem(\"WLDDMQ_id\"))\n                    .then((responses) => {\n                        console.log(this.demonstrations[this.selectedDemoIndex].action[this.actionIndex]);\n                        this.demonstrations[this.selectedDemoIndex].action[this.actionIndex].parametersTopics.forEach(element => this.tempParameters.push(element));\n                        this.demonstrations[this.selectedDemoIndex].action[this.actionIndex].parametersMessages.forEach(element => this.tempParameters.push(element));\n                        this.$parent.update(() => {\n                            this.showParamsPopUp('topic', this.$parent.demonstrations);\n                        });\n                        this.editModal = false;\n                    }, (response) => {\n                        console.log('erreur', response)\n                    })\n            }\n            else{\n                alert('Fill action name and topic!')\n            }\n\n        },\n        //Permits to show the popUp to fill parameters\n        showParamsPopUp(type, demonstrations) {\n            const regex = /\\{\\{[a-zA-Z0-9]*\\}\\}/gm;\n            let matches;\n            if (type == 'topic') {\n                matches = this.newActionTopic.matchAll(regex);\n            } else if (type == 'message') {\n                matches = this.newActionMessage.matchAll(regex);\n            }\n            for (const match of matches) {\n                this.parametersMap.set(match[0], match[0]);\n                if (type == 'topic') {\n                    this.parametersIds.set(match[0], demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].parametersTopics.filter(element => element.parameter == match[0])[0].id);\n                } else if (type == 'message') {\n                    this.parametersIds.set(match[0], demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].parametersMessages.filter(element => element.parameter == match[0])[0].id);\n                }\n            }\n            if (this.parametersMap.size > 0) {\n                if (type == 'topic') {\n                    this.popUpTopic = 1;\n                } else if (type == 'message') {\n                    this.popUpMessage = 1;\n                }\n            } else {\n                if (type == 'topic') {\n                    this.$parent.update(() => {\n                        this.showParamsPopUp('message', this.$parent.demonstrations);\n                    });\n                }else{\n                    this.tempParameters = [];\n\n                }\n            }\n        },\n        //Permits to close editing modal\n        cancelEditModal() {\n            this.editModal = 0;\n            this.newActionName = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].name;\n            this.newActionTopic = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].topic;\n            this.newActionMessage = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].message;\n        },\n        //Permits to close param editing modal\n        closeParamEditing() {\n            this.popUpTopic = 0;\n            this.popUpMessage = 0;\n            this.parametersMap = new HashMap();\n            this.parametersIds = new HashMap();\n            this.newDefaultValues = [];\n        },\n        //Permits to fill default parameter values\n        setDefaultParams(type)\n        {\n            var toSend = new Array();\n            for (var i = 0; i < this.parametersIds.size; i++) {\n                var temp = new Object();\n                temp.id = this.parametersIds.values()[i];\n                temp.value = this.newDefaultValues[i];\n                toSend.push(temp);\n            }\n            axios\n                .post(config.baseLink + '/parameters/addAllParametersDefaultValues?jsonString='+encodeURI(JSON.stringify(toSend)))\n                .then((responses) => {\n                    if (type == 'topic') {\n                        this.$parent.update(() => {\n                            this.showParamsPopUp('message', this.$parent.demonstrations);\n                        });\n                        this.closeParamEditing();\n                    } else {\n                        this.$parent.update();\n                        this.closeParamEditing();\n                        this.tempParameters = [];\n                    }\n                }, (response) => {\n                    console.log('erreur', response)\n                })\n        },\n        //Permits to search existing value for a parameter when editing an action\n        findValueExisting(index){\n            var temp='';\n            for(var i=0;i<this.tempParameters.length;i++){\n                if(this.tempParameters[i].parameter==this.parametersMap.keys()[index-1]){\n                    temp = this.tempParameters[i].parameterDefaultValue;\n                    this.parametersMap.set(this.tempParameters[i].parameter,temp);\n                    this.newDefaultValues[index-1] = temp;\n                }\n            }\n            return temp;\n        },\n        //Permit to set value for a parameter\n        setValue(type,index,$event){\n            this.parametersMap.set(this.parametersMap.keys()[index-1],$event);\n            if(type=='topic'){\n                this.$refs.parameterContentTopic[index-1].value=$event;\n                this.newDefaultValues[index-1] = $event;\n            }\n            else if(type=='message')\n            {\n                this.$refs.parameterContentMessage[index-1].value=$event;\n                this.newDefaultValues[index-1] = $event;\n            }\n        },\n        exportAction(){\n            axios\n                .get(config.baseLink +'/action/getActionById?actionId='+this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].id)\n                .then((responses) => {\n                    let jsonAction = responses.data;\n                    delete jsonAction.id;\n                    jsonAction.parametersTopics.forEach(element => delete element.id);\n                    jsonAction.parametersMessages.forEach(element => delete element.id);\n                    let dataStr = JSON.stringify(jsonAction);\n                    let dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n                    let exportFileDefaultName = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].name+'_action'+'.json';\n                    let linkElement = document.createElement('a');\n                    linkElement.setAttribute('href', dataUri);\n                    linkElement.setAttribute('download', exportFileDefaultName);\n                    linkElement.click();\n                }, (response) => {\n                    console.log('erreur', response)\n                })\n        },\n        importAction(event,demoId){\n            var reader = new FileReader();\n            reader.onload = function(event) {\n                var jsonObj = JSON.parse(event.target.result);\n                console.log(demoId)\n                axios\n                    .post(config.baseLink + '/action/importAction?actionJson='+ encodeURI(JSON.stringify(jsonObj))+'&demoId='+demoId)\n                    .then((responses) => {\n                        this.$parent.update();\n                        this.cancelEditModal();\n                        this.importConfirmation = 0;\n                    }, (response) => {\n                        console.log('erreur', response)\n                    })\n            }\n            reader.readAsText(event.target.files[0]);\n            event.target.value = '';\n            this.importConfirmation = 1;\n            this.$parent.update();\n            this.cancelEditModal();\n        }\n    }\n}\n",{"version":3,"sources":["ActionPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyQA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ActionPanel.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <v-flex md9>\r\n        <!--Action panel related to the demonstration choosed by the user-->\r\n        <v-expansion-panel v-model=\"showActionPanel\"   v-if=\"selected!=null\"    >\r\n            <v-expansion-panel-content>\r\n                <template v-slot:header>\r\n                    <div class=\"strongTexts\">Actions</div>\r\n                </template>\r\n\r\n                <v-card>\r\n                    <div class=\"actionsGroup\">\r\n                        <v-flex v-for=\"action in selected.action\"\r\n                                class=\"action\"\r\n                                md3>\r\n                            <v-flex>\r\n                                <v-btn color=rgba(0,103,160,1)\r\n                                       @click=\"assignTopic(action)\"\r\n                                       block>\r\n                                    <div class=\"button\" v-if=\"actionId==action.id\">></div>\r\n                                    <div class=\"button\" style=\"white-space: pre-wrap; font-size: 12px\">{{action.name}}</div>\r\n                                    <div class=\"button\" v-if=\"actionId==action.id\"><</div>\r\n                                </v-btn>\r\n                            </v-flex>\r\n                        </v-flex>\r\n                    </div>\r\n                </v-card>\r\n            </v-expansion-panel-content>\r\n        </v-expansion-panel>\r\n\r\n        <!--Confirmation popUp when deleting an action-->\r\n        <v-dialog v-model=\"deletePopUp\"\r\n                width=\"550\">\r\n            <template v-slot:activator=\"{ on }\">\r\n\r\n            </template>\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    WARNING : Are you sure to delete the action : {{actionName}}\r\n                </v-card-title>\r\n\r\n                <v-card-actions>\r\n                    <v-btn\r\n                            color=\"primary\"\r\n                            flat\r\n                            @click=\"deleteModal=false\">\r\n                        NO\r\n                    </v-btn>\r\n\r\n                    <v-spacer></v-spacer>\r\n                    <v-btn\r\n                            color=\"primary\"\r\n                            flat\r\n                            @click=\"deleteAction()\">\r\n                        YES\r\n                    </v-btn>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-dialog>\r\n\r\n        <!--popUp for editing actions-->\r\n        <v-dialog v-model=\"editModal\"\r\n                  width=\"550\"\r\n                  persistent=\"\">\r\n            <template v-slot:activator=\"{ on }\">\r\n\r\n            </template>\r\n\r\n            <v-card @submit.prevent>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    <div class=\"edit\">\r\n                        Edit action : {{actionName}}\r\n                    </div>\r\n                    <v-spacer></v-spacer>\r\n\r\n                    <div class=\"edit\">Import</div>\r\n                    <v-btn fab small color=\"rgba(0,103,160,1)\" @click=\"$refs.inputUpload.click()\">\r\n\r\n                        <v-icon color=\"white\">\r\n                            cloud_upload\r\n                        </v-icon>\r\n                    </v-btn>\r\n                    <input type=\"file\"\r\n                           ref=\"inputUpload\"\r\n                           id=\"jsonAction\" name=\"jsonAction\"\r\n                           accept=\".json\"\r\n                           v-show=\"false\"\r\n                           @change=\"importAction($event,demonstrations[selectedDemoIndex].id)\">\r\n\r\n                    <div class=\"edit\">Export</div>\r\n                    <v-btn fab small color=\"rgba(0,103,160,1)\" @click=\"exportAction()\">\r\n                        <v-icon color=\"white\">\r\n                            cloud_download\r\n                        </v-icon>\r\n                    </v-btn>\r\n                </v-card-title>\r\n\r\n\r\n                <v-form>\r\n                    <v-text-field\r\n                            label=\"Action Name\"\r\n                            v-model=\"newActionName\"\r\n                            solo>\r\n                    </v-text-field>\r\n\r\n                    <v-text-field\r\n                            label=\"Action Topic\"\r\n                            v-model=\"newActionTopic\"\r\n                            solo>\r\n                    </v-text-field>\r\n\r\n                    <v-textarea\r\n                            label=\"Action Message\"\r\n                            v-model=\"newActionMessage\"\r\n                            solo>\r\n                    </v-textarea>\r\n\r\n                    <v-card-actions>\r\n                        <v-btn\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"cancelEditModal()\">\r\n                            CANCEL\r\n                        </v-btn>\r\n\r\n                        <v-spacer></v-spacer>\r\n\r\n                        <v-btn  type=\"submit\"\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"editAction()\">\r\n                            SAVE\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </v-form>\r\n            </v-card>\r\n        </v-dialog>\r\n\r\n        <!--PopUp permitting to change parameters for the message of the action that we are editing-->\r\n        <v-dialog\r\n                v-model=\"popUpMessage\"\r\n                width=\"500\"\r\n                persistent>\r\n            <template v-slot:activator=\"{ on }\">\r\n\r\n            </template>\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    Fill default parameters for Message\r\n                </v-card-title>\r\n\r\n                </br>\r\n\r\n                <v-form @submit.prevent=\"setDefaultParams('message')\">\r\n                    <v-flex d-flex\r\n                            v-for=\"index in parametersMap.size\">\r\n                        <v-flex md3 offset-md1 offset-xs1>\r\n                            <div class=\"parameters\">\r\n                                {{parametersMap.keys()[index-1]}}\r\n                            </div>\r\n                        </v-flex>\r\n                        <v-flex md6 d-flex>\r\n                            <v-text-field\r\n                                    ref=\"parameterContentMessage\"\r\n                                    @change=\"setValue('message',index,$event)\"\r\n                                    :value=\"findValueExisting(index)\"\r\n                                    solo>\r\n                            </v-text-field>\r\n                        </v-flex>\r\n                    </v-flex>\r\n\r\n                    <v-card-actions>\r\n                        <v-spacer></v-spacer>\r\n\r\n                        <v-btn  type=\"submit\"\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"setDefaultParams('message')\">\r\n                            Apply\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </v-form>\r\n\r\n            </v-card>\r\n        </v-dialog>\r\n\r\n        <!--PopUp permitting to change parameters for the topic of the action that we are editing-->\r\n        <v-dialog\r\n                v-model=\"popUpTopic\"\r\n                width=\"500\"\r\n                persistent=\"\">\r\n            <template v-slot:activator=\"{ on }\">\r\n\r\n            </template>\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    Fill default parameters for Topic\r\n                </v-card-title>\r\n\r\n                </br>\r\n\r\n                <v-form @submit.prevent=\"setDefaultParams('topic')\">\r\n                    <v-flex d-flex\r\n                            v-for=\"index in parametersMap.size\">\r\n                        <v-flex md3 offset-md1 offset-xs1>\r\n                            <div class=\"parameters\">\r\n                                {{parametersMap.keys()[index-1]}}\r\n                            </div>\r\n                        </v-flex>\r\n                        <v-flex md6 d-flex>\r\n                            <v-text-field\r\n                                    ref=\"parameterContentTopic\"\r\n                                    @change=\"setValue('topic',index,$event)\"\r\n                                    :value=\"findValueExisting(index)\"\r\n                                    solo>\r\n                            </v-text-field>\r\n                        </v-flex>\r\n                    </v-flex>\r\n\r\n                    <v-card-actions>\r\n                        <v-spacer></v-spacer>\r\n\r\n                        <v-btn  type=\"submit\"\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"setDefaultParams('topic')\">\r\n                            Apply\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </v-form>\r\n            </v-card>\r\n        </v-dialog>\r\n\r\n        <v-dialog v-model=\"importConfirmation\"\r\n                  width=\"550\">\r\n            <template v-slot:activator=\"{ on }\">\r\n\r\n            </template>\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    Action Imported!\r\n                </v-card-title>\r\n\r\n                <v-card-actions>\r\n                    <v-btn\r\n                            color=\"primary\"\r\n                            flat\r\n                            @click=\"importConfirmation=0\">\r\n                        Close\r\n                    </v-btn>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-dialog>\r\n    </v-flex>\r\n</template>\r\n\r\n<script>\r\n    import {config} from '@/assets/js/Utils.js';\r\n    import axios from 'axios';\r\n    var HashMap = require('hashmap');\r\n\r\n\r\n    export default {\r\n        name: 'ActionPanel',\r\n        props:{\r\n            'actionPanel':Number,\r\n            'selected': Object,\r\n            'deletePopUp' : Boolean,\r\n            'editPopUp' : Boolean,\r\n            'demonstrations': Array,\r\n            'selectedActionIndex': Number,\r\n            'selectedDemoIndex': Number,\r\n        },\r\n        data:function(){\r\n            return {\r\n                showActionPanel : this.actionPanel,\r\n                deleteModal:this.deletePopUp,\r\n                actionName:null,\r\n                actionId:null,\r\n                editModal : this.editPopUp,\r\n                newActionName:'',\r\n                newActionTopic:'',\r\n                newActionMessage:'',\r\n                parametersMap: new HashMap(),  //Hashmap with all the parameters\r\n                parametersIds: new HashMap(), //Hashmap with parameters Id's\r\n                popUpMessage: 0,//popUp for filling message parameters of the action that wa are editing\r\n                popUpTopic: 0,  //popUp for filling topic parameters of the action that wa are editing\r\n                newDefaultValues:[],  //new default values of the action that we are editing\r\n                actionIndex : this.selectedActionIndex,  //index of the selected action\r\n\r\n                tempParameters : [],                 //copy of default values for the action that we want to edit\r\n                importConfirmation : 0,\r\n            }\r\n        },\r\n        watch:{\r\n            actionPanel:function(){\r\n                this.showActionPanel = this.actionPanel;\r\n            },\r\n            selected:function(){\r\n                this.showActionPanel = 0;\r\n            },\r\n            deletePopUp:function(){\r\n                this.deleteModal = this.deletePopUp;\r\n            },\r\n            deleteModal:function(){\r\n                this.$emit('deletePopUp',this.deleteModal);\r\n            },\r\n            editPopUp:function(){\r\n                this.editModal = this.editPopUp;\r\n                if(this.editModal==true)\r\n                {\r\n                    this.newActionName = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].name;\r\n                    this.newActionTopic = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].topicOriginal;\r\n                    this.newActionMessage = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].messageOriginal;\r\n                }\r\n            },\r\n            editModal:function(){\r\n                this.$emit('editPopUp',this.editModal);\r\n            },\r\n            showActionPanel:function(){\r\n                this.$emit('actionPanel',this.showActionPanel);\r\n            },\r\n            selectedActionIndex:function(){\r\n                this.actionIndex = this.selectedActionIndex;\r\n            },\r\n            actionIndex:function(){\r\n                this.$emit('selectedActionIndex',this.actionIndex);\r\n            }\r\n        },\r\n        methods: {\r\n            //permits to select an action\r\n            assignTopic(action) {\r\n                this.actionName = action.name;\r\n                this.actionId = action.id;\r\n                this.$parent.assignTopic(action);\r\n                this.newActionName = action.name;\r\n                this.newActionTopic = action.topic;\r\n                this.newActionMessage = action.message;\r\n            },\r\n            //permits to delete an action\r\n            deleteAction() {\r\n                axios\r\n                    .post(config.baseLink + '/action/deleteAction?actionId=' + this.actionId)\r\n                    .then((responses) => {\r\n                        this.$parent.update();\r\n                        this.deleteModal = false;\r\n                        this.newActionName = '';\r\n                        this.newActionMessage = '';\r\n                        this.newActionTopic = '';\r\n                        this.actionIndex = null;\r\n                    }, (response) => {\r\n                        console.log('erreur', response)\r\n                    })\r\n            },\r\n            //Permits to Add a new action for a demonstration\r\n            editAction() {\r\n                if(this.newActionName!=''&&this.newActionTopic!='')\r\n                {\r\n                    axios\r\n                        .post(config.baseLink + '/action/editAction?actionId=' + this.actionId + '&name=' + encodeURI(this.newActionName) + '&topic=' + encodeURI(this.newActionTopic) + '&message=' + encodeURI(this.newActionMessage)+'&lastEditionId='+localStorage.getItem(\"WLDDMQ_id\"))\r\n                        .then((responses) => {\r\n                            console.log(this.demonstrations[this.selectedDemoIndex].action[this.actionIndex]);\r\n                            this.demonstrations[this.selectedDemoIndex].action[this.actionIndex].parametersTopics.forEach(element => this.tempParameters.push(element));\r\n                            this.demonstrations[this.selectedDemoIndex].action[this.actionIndex].parametersMessages.forEach(element => this.tempParameters.push(element));\r\n                            this.$parent.update(() => {\r\n                                this.showParamsPopUp('topic', this.$parent.demonstrations);\r\n                            });\r\n                            this.editModal = false;\r\n                        }, (response) => {\r\n                            console.log('erreur', response)\r\n                        })\r\n                }\r\n                else{\r\n                    alert('Fill action name and topic!')\r\n                }\r\n\r\n            },\r\n            //Permits to show the popUp to fill parameters\r\n            showParamsPopUp(type, demonstrations) {\r\n                const regex = /\\{\\{[a-zA-Z0-9]*\\}\\}/gm;\r\n                let matches;\r\n                if (type == 'topic') {\r\n                    matches = this.newActionTopic.matchAll(regex);\r\n                } else if (type == 'message') {\r\n                    matches = this.newActionMessage.matchAll(regex);\r\n                }\r\n                for (const match of matches) {\r\n                    this.parametersMap.set(match[0], match[0]);\r\n                    if (type == 'topic') {\r\n                        this.parametersIds.set(match[0], demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].parametersTopics.filter(element => element.parameter == match[0])[0].id);\r\n                    } else if (type == 'message') {\r\n                        this.parametersIds.set(match[0], demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].parametersMessages.filter(element => element.parameter == match[0])[0].id);\r\n                    }\r\n                }\r\n                if (this.parametersMap.size > 0) {\r\n                    if (type == 'topic') {\r\n                        this.popUpTopic = 1;\r\n                    } else if (type == 'message') {\r\n                        this.popUpMessage = 1;\r\n                    }\r\n                } else {\r\n                    if (type == 'topic') {\r\n                        this.$parent.update(() => {\r\n                            this.showParamsPopUp('message', this.$parent.demonstrations);\r\n                        });\r\n                    }else{\r\n                        this.tempParameters = [];\r\n\r\n                    }\r\n                }\r\n            },\r\n            //Permits to close editing modal\r\n            cancelEditModal() {\r\n                this.editModal = 0;\r\n                this.newActionName = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].name;\r\n                this.newActionTopic = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].topic;\r\n                this.newActionMessage = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].message;\r\n            },\r\n            //Permits to close param editing modal\r\n            closeParamEditing() {\r\n                this.popUpTopic = 0;\r\n                this.popUpMessage = 0;\r\n                this.parametersMap = new HashMap();\r\n                this.parametersIds = new HashMap();\r\n                this.newDefaultValues = [];\r\n            },\r\n            //Permits to fill default parameter values\r\n            setDefaultParams(type)\r\n            {\r\n                var toSend = new Array();\r\n                for (var i = 0; i < this.parametersIds.size; i++) {\r\n                    var temp = new Object();\r\n                    temp.id = this.parametersIds.values()[i];\r\n                    temp.value = this.newDefaultValues[i];\r\n                    toSend.push(temp);\r\n                }\r\n                axios\r\n                    .post(config.baseLink + '/parameters/addAllParametersDefaultValues?jsonString='+encodeURI(JSON.stringify(toSend)))\r\n                    .then((responses) => {\r\n                        if (type == 'topic') {\r\n                            this.$parent.update(() => {\r\n                                this.showParamsPopUp('message', this.$parent.demonstrations);\r\n                            });\r\n                            this.closeParamEditing();\r\n                        } else {\r\n                            this.$parent.update();\r\n                            this.closeParamEditing();\r\n                            this.tempParameters = [];\r\n                        }\r\n                    }, (response) => {\r\n                        console.log('erreur', response)\r\n                    })\r\n            },\r\n            //Permits to search existing value for a parameter when editing an action\r\n            findValueExisting(index){\r\n                var temp='';\r\n                for(var i=0;i<this.tempParameters.length;i++){\r\n                    if(this.tempParameters[i].parameter==this.parametersMap.keys()[index-1]){\r\n                        temp = this.tempParameters[i].parameterDefaultValue;\r\n                        this.parametersMap.set(this.tempParameters[i].parameter,temp);\r\n                        this.newDefaultValues[index-1] = temp;\r\n                    }\r\n                }\r\n                return temp;\r\n            },\r\n            //Permit to set value for a parameter\r\n            setValue(type,index,$event){\r\n                this.parametersMap.set(this.parametersMap.keys()[index-1],$event);\r\n                if(type=='topic'){\r\n                    this.$refs.parameterContentTopic[index-1].value=$event;\r\n                    this.newDefaultValues[index-1] = $event;\r\n                }\r\n                else if(type=='message')\r\n                {\r\n                    this.$refs.parameterContentMessage[index-1].value=$event;\r\n                    this.newDefaultValues[index-1] = $event;\r\n                }\r\n            },\r\n            exportAction(){\r\n                axios\r\n                    .get(config.baseLink +'/action/getActionById?actionId='+this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].id)\r\n                    .then((responses) => {\r\n                        let jsonAction = responses.data;\r\n                        delete jsonAction.id;\r\n                        jsonAction.parametersTopics.forEach(element => delete element.id);\r\n                        jsonAction.parametersMessages.forEach(element => delete element.id);\r\n                        let dataStr = JSON.stringify(jsonAction);\r\n                        let dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\r\n                        let exportFileDefaultName = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].name+'_action'+'.json';\r\n                        let linkElement = document.createElement('a');\r\n                        linkElement.setAttribute('href', dataUri);\r\n                        linkElement.setAttribute('download', exportFileDefaultName);\r\n                        linkElement.click();\r\n                    }, (response) => {\r\n                        console.log('erreur', response)\r\n                    })\r\n            },\r\n            importAction(event,demoId){\r\n                var reader = new FileReader();\r\n                reader.onload = function(event) {\r\n                    var jsonObj = JSON.parse(event.target.result);\r\n                    console.log(demoId)\r\n                    axios\r\n                        .post(config.baseLink + '/action/importAction?actionJson='+ encodeURI(JSON.stringify(jsonObj))+'&demoId='+demoId)\r\n                        .then((responses) => {\r\n                            this.$parent.update();\r\n                            this.cancelEditModal();\r\n                            this.importConfirmation = 0;\r\n                        }, (response) => {\r\n                            console.log('erreur', response)\r\n                        })\r\n                }\r\n                reader.readAsText(event.target.files[0]);\r\n                event.target.value = '';\r\n                this.importConfirmation = 1;\r\n                this.$parent.update();\r\n                this.cancelEditModal();\r\n            }\r\n        }\r\n    }\r\n</script>\r\n"]}]}