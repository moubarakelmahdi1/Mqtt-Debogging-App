{"remainingRequest":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\WEB\\WLDD_hiveMQ\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\WEB\\WLDD_hiveMQ\\src\\App.vue","mtime":1560777618647},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Header from './components/Header'\nimport Body from './components/Body'\nimport Footer from './components/Footer'\nimport axios from 'axios';\nimport config from './assets/js/config';\nimport {isNotNull} from \"./assets/js/Utils\";\n\nexport default {\n  name: 'App',\n  components: {\n    Header,\n    Body,\n    Footer\n  },\n  data() {\n    return {\n      isLogged: false\n    }\n  },\n  created(){\n    this.configAxios();\n    this.dassoLogin();\n  },\n  methods: {\n    configAxios(){\n      axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n      axios.defaults.headers.common['env'] = 'WLDDMQ';\n      var token = sessionStorage.getItem(\"WLDDMQ_token\");\n      if(isNotNull(token)) {\n        axios.defaults.headers.common['authorization'] = \"Bearer \" + token;\n      }\n    },\n    dassoLogin(){\n      var self = this;\n      var token = sessionStorage.getItem(\"WLDDMQ_token\");\n      var isLogout = this.$route.query.logout;\n      var adminComplexId = this.$route.query.adminComplexId;\n      var needDassoLogin = false;\n      if(isNotNull(token)){\n        axios.get(config.WLDDMQ_URL + \"/version\")\n                .then(function (response) {\n                  if (response.status == 401) {\n                    sessionStorage.removeItem(\"WLDDMQ_token\");\n                    needDassoLogin = true;\n                    self.isLogged = false;\n                  }else{\n                    self.isLogged = true;\n                  }\n                })\n      }else if(isNotNull(adminComplexId)){\n        sessionStorage.removeItem(\"WLDDMQ_token\");\n\n        var params = new URLSearchParams();\n        params.append('adminComplexId', adminComplexId);\n\n        axios.post(config.WLDDMQ_URL + \"/admin/authenticate\", params)\n                .then(function (response) {\n                  if (response.status == 200) {\n                    self.isLogged = true;\n                    sessionStorage.setItem(\"WLDDMQ_token\", response.data.token);\n                    sessionStorage.setItem(\"WLDDMQ_das\", response.data.das);\n                    sessionStorage.setItem(\"WLDDMQ_name\", response.data.name);\n                    sessionStorage.setItem(\"WLDDMQ_email\", response.data.email);\n                    sessionStorage.setItem(\"WLDDMQ_isAdmin\", response.data.isAdmin);\n                    sessionStorage.setItem(\"WLDDMQ_id\", response.data.id);\n\n                    self.isLogged = true;\n                    self.$router.push('/');\n                  }else{\n                    alert(\"Error on get token\");\n                  }\n                })\n      }else if(isNotNull(isLogout) && isLogout == \"true\"){\n        var clientId = config.CLIENT_ID;\n        var redirectUri = encodeURI(config.CLIENT_CALLBACK);\n        var dassoLogin = config.OAUTH2_SERVER + \"/authorize.php?client_id=\" + clientId + \"&response_type=code&redirect_uri=\" + redirectUri;\n        window.location.replace(dassoLogin);\n      }else{\n        needDassoLogin = true;\n        self.isLogged = false;\n      }\n      if(needDassoLogin){\n        this.dassoLogout();\n      }\n    },\n    dassoLogout(){\n      var dassoLogout = config.OAUTH2_SERVER + \"/login.php?action=logout&redirect=\" + encodeURI(window.location.href + \"?logout=true\");\n      window.location.replace(dassoLogout);\n    }\n  },\n  watch:{\n    '$route': function() {\n      this.configAxios();\n      this.dassoLogin();\n    }\n  }\n}\n\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <v-app v-if=\"isLogged\">\n    <Header></Header>\n    <v-content>\n      <v-container fluid grid-list-xl>\n        <Body></Body>\n      </v-container>\n    </v-content>\n    <Footer></Footer>\n  </v-app>\n</template>\n\n\n<script>\n  import Header from './components/Header'\n  import Body from './components/Body'\n  import Footer from './components/Footer'\n  import axios from 'axios';\n  import config from './assets/js/config';\n  import {isNotNull} from \"./assets/js/Utils\";\n\n  export default {\n    name: 'App',\n    components: {\n      Header,\n      Body,\n      Footer\n    },\n    data() {\n      return {\n        isLogged: false\n      }\n    },\n    created(){\n      this.configAxios();\n      this.dassoLogin();\n    },\n    methods: {\n      configAxios(){\n        axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n        axios.defaults.headers.common['env'] = 'WLDDMQ';\n        var token = sessionStorage.getItem(\"WLDDMQ_token\");\n        if(isNotNull(token)) {\n          axios.defaults.headers.common['authorization'] = \"Bearer \" + token;\n        }\n      },\n      dassoLogin(){\n        var self = this;\n        var token = sessionStorage.getItem(\"WLDDMQ_token\");\n        var isLogout = this.$route.query.logout;\n        var adminComplexId = this.$route.query.adminComplexId;\n        var needDassoLogin = false;\n        if(isNotNull(token)){\n          axios.get(config.WLDDMQ_URL + \"/version\")\n                  .then(function (response) {\n                    if (response.status == 401) {\n                      sessionStorage.removeItem(\"WLDDMQ_token\");\n                      needDassoLogin = true;\n                      self.isLogged = false;\n                    }else{\n                      self.isLogged = true;\n                    }\n                  })\n        }else if(isNotNull(adminComplexId)){\n          sessionStorage.removeItem(\"WLDDMQ_token\");\n\n          var params = new URLSearchParams();\n          params.append('adminComplexId', adminComplexId);\n\n          axios.post(config.WLDDMQ_URL + \"/admin/authenticate\", params)\n                  .then(function (response) {\n                    if (response.status == 200) {\n                      self.isLogged = true;\n                      sessionStorage.setItem(\"WLDDMQ_token\", response.data.token);\n                      sessionStorage.setItem(\"WLDDMQ_das\", response.data.das);\n                      sessionStorage.setItem(\"WLDDMQ_name\", response.data.name);\n                      sessionStorage.setItem(\"WLDDMQ_email\", response.data.email);\n                      sessionStorage.setItem(\"WLDDMQ_isAdmin\", response.data.isAdmin);\n                      sessionStorage.setItem(\"WLDDMQ_id\", response.data.id);\n\n                      self.isLogged = true;\n                      self.$router.push('/');\n                    }else{\n                      alert(\"Error on get token\");\n                    }\n                  })\n        }else if(isNotNull(isLogout) && isLogout == \"true\"){\n          var clientId = config.CLIENT_ID;\n          var redirectUri = encodeURI(config.CLIENT_CALLBACK);\n          var dassoLogin = config.OAUTH2_SERVER + \"/authorize.php?client_id=\" + clientId + \"&response_type=code&redirect_uri=\" + redirectUri;\n          window.location.replace(dassoLogin);\n        }else{\n          needDassoLogin = true;\n          self.isLogged = false;\n        }\n        if(needDassoLogin){\n          this.dassoLogout();\n        }\n      },\n      dassoLogout(){\n        var dassoLogout = config.OAUTH2_SERVER + \"/login.php?action=logout&redirect=\" + encodeURI(window.location.href + \"?logout=true\");\n        window.location.replace(dassoLogout);\n      }\n    },\n    watch:{\n      '$route': function() {\n        this.configAxios();\n        this.dassoLogin();\n      }\n    }\n  }\n\n</script>"]}]}