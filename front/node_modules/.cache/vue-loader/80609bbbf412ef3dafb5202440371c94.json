{"remainingRequest":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\WEB\\WLDD_hiveMQ\\src\\components\\Body.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\WEB\\WLDD_hiveMQ\\src\\components\\Body.vue","mtime":1560776961840},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ConnectionPopUp from \"./ConnectionPopUp\";\nvar utils= require('@/assets/js/Utils.js');\nimport {config} from '@/assets/js/Utils.js';\nimport axios from 'axios';\nimport Selector from './Selector.vue'\nimport ActionPanel from './ActionPanel.vue'\nimport PublishPanel from './PublishPanel.vue'\nimport SubscribePanel from './SubscribePanel.vue'\nimport AddingPanel from './AddingPanel.vue'\nimport Inbox from './Inbox.vue'\n\nexport default {\n    name: 'Body',\n    components:{\n        ConnectionPopUp,\n        Selector,\n        ActionPanel,\n        PublishPanel,\n        SubscribePanel,\n        AddingPanel,\n        Inbox\n    },\n    data: function () {\n\n        return {\n            //Panels variables\n            publishPanel: null,\n            actionPanel: null,\n\n            //Publish Panel content\n            messageToSend: '',\n            topic: '',\n\n            //Connection variables\n            connection: true,\n\n            //Demonstrations\n            selected: null,\n            demonstrations:[],\n            userGroups:[],\n            selectedUserGroup : {\n                id:1,\n                isSelected:false,\n                name:'WLDD',\n            },\n\n            //Variables for Hashmaps\n            actualTopic : '',\n            actualMessage : '',\n\n            //Indexes\n            selectedDemoIndex : null,\n            selectedActionIndex : null,\n\n            //PopUps Variables\n            popUps : null,\n            deletePopUp:false,\n            editPopUp:false,\n\n            showBtn : 0,    //Variable for editing buttons\n\n            subscribedTopics : [],  //Tab who saves subscribed topics\n            oldValuesTab : [{\"key\":\"{{test}}\",\"value\":\"{{test}}\"}],  //Tab who saves last value used for a parameter\n        }\n    },\n\n    watch:{\n      selected:function(){\n          this.topic = '';\n          this.messageToSend = '';\n      }\n    },\n\n    //Permits to get all data when starting the website\nmounted(){\n    axios\n        .get(config.baseLink+'/user/findAll')\n        .then((responses) =>{\n            this.userGroups = [];\n            this.userGroups = responses.data;\n            for(var i = 0; i<this.userGroups.length;i++)\n            {\n                this.userGroups[i].isSelected=false;\n            }\n        }, (responses) =>{\n            console.log('erreur',responses);\n        })\n},\n    methods: {\n        //Permits to import data from webservice database\n        update(callback=null){\n            axios\n                .get(config.baseLink+'/demo/findByUserGroupId?userGroupId='+this.selectedUserGroup.id)\n                .then((responses) =>{\n                    this.demonstrations = [];\n                    this.demonstrations=responses.data;\n                    for(var j=0;j<this.demonstrations.length;j++)\n                    {\n                        for(var i=0;i<this.demonstrations[j].action.length;i++)\n                        {\n                            this.demonstrations[j].action[i].demo=this.selected;\n                            this.demonstrations[j].action[i].isSelected=false;\n                            this.demonstrations[j].action[i].topicSubscribe=this.demonstrations[j].action[i].topic;\n                            this.demonstrations[j].action[i].topicOriginal=this.demonstrations[j].action[i].topic;\n                            this.demonstrations[j].action[i].messageOriginal=this.demonstrations[j].action[i].message;\n                            this.demonstrations[j].action[i].messageOriginal=this.demonstrations[j].action[i].message;\n                        }\n                    }\n                    if(this.selected!=null)\n                    {\n                        this.selected = this.demonstrations.filter(demonstration => demonstration.id == this.selected.id)[0];\n                    }\n                    if(callback!=null){\n                        callback();\n                    }\n                }, (response)=>{\n                console.log('erreur',response)\n            })\n        },\n\n        //Permits to fill the publish panel when we select an action\n        assignTopic(action) {\n            this.topic = action.topic;\n            this.actualTopic = action.topicOriginal;\n            this.messageToSend = action.message;\n            this.actualMessage = action.messageOriginal;\n            this.publishPanel = 0;\n            this.selectedActionIndex = this.demonstrations[this.selectedDemoIndex].action.indexOf(action);\n            this.popUps = 1;\n            this.showBtn = 1;\n\n        }\n    },\n}\n",{"version":3,"sources":["Body.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Body.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div>\r\n        <v-layout>\r\n            <v-flex d-flex md11>\r\n                <!--Drop down menu to select the demonstration-->\r\n                <Selector  :demonstrations=\"demonstrations\"\r\n                           @actionPanel=\"actionPanel=$event\"\r\n                           @selected=\"selected=$event\"\r\n                           @selectedDemoIndex=\"selectedDemoIndex=$event\"\r\n                           @selectedActionIndex=\"selectedActionIndex=$event\"\r\n                           :editPopUp=\"editPopUp\"\r\n                           @editPopUp=\"editPopUp=$event\"\r\n                           :deletePopUp=\"deletePopUp\"\r\n                           @deletePopUp=\"deletePopUp=$event\"\r\n                           :selectedActionIndex=\"selectedActionIndex\"\r\n                           :showBtn=\"showBtn\"\r\n                           @showBtn=\"showBtn=$event\"\r\n                           :actionPanel=\"actionPanel\"\r\n                           :userGroups=\"userGroups\"></Selector>\r\n\r\n                <!--Action buttons related to the demonstration choosed by the user-->\r\n                <ActionPanel :selected=\"selected\"\r\n                             :actionPanel=\"actionPanel\"\r\n                             :deletePopUp=\"deletePopUp\"\r\n                             @deletePopUp=\"deletePopUp=$event\"\r\n                             :editPopUp=\"editPopUp\"\r\n                             @editPopUp=\"editPopUp=$event\"\r\n                             :demonstrations=\"demonstrations\"\r\n                             :selectedActionIndex=\"selectedActionIndex\"\r\n                             :selectedDemoIndex=\"selectedDemoIndex\"\r\n                             @actionPanel=\"actionPanel=$event\"\r\n                             @selectedActionIndex=\"selectedActionIndex=$event\"></ActionPanel>\r\n            </v-flex>\r\n        </v-layout>\r\n\r\n        <v-flex d-flex md10 offset-md1>\r\n            <!--Publish panel permitting to send a message to a certain topic-->\r\n            <!--PopUp permitting to change parameters to the message to send-->\r\n            <!--PopUp permitting to change parameters to the topic where we want to publish-->\r\n            <v-flex md7>\r\n                <PublishPanel :publishPanel=\"publishPanel\"\r\n                              :topic=\"topic\"\r\n                              :messageToSend=\"messageToSend\"\r\n                              @topic=\"topic=$event\"\r\n                              @messageToSend=\"messageToSend=$event\"\r\n                              :actualTopic=\"actualTopic\"\r\n                              :actualMessage=\"actualMessage\"\r\n                              :demonstrations=\"demonstrations\"\r\n                              :selectedActionIndex=\"selectedActionIndex\"\r\n                              :selectedDemoIndex=\"selectedDemoIndex\"\r\n                              :popUps=\"popUps\"\r\n                              @popUps=\"popUps=$event\"\r\n                              @oldValuesTab=\"oldValuesTab=$event\"\r\n                              :oldValuesTab=\"oldValuesTab\"></PublishPanel>\r\n            </v-flex>\r\n\r\n            <v-flex md4 offset-md1>\r\n                <!--Subscribe panel permitting to subscribe to certain topics and receive message from them-->\r\n                <SubscribePanel :selectedDemoIndex=\"selectedDemoIndex\"\r\n                                :demonstrations=\"demonstrations\"\r\n                                :subscribedTopics=\"subscribedTopics\"\r\n                                @subscribedTopics=\"subscribedTopics=$event\"\r\n                                @oldValuesTab=\"oldValuesTab=$event\"\r\n                                :oldValuesTab=\"oldValuesTab\"></SubscribePanel>\r\n            </v-flex>\r\n        </v-flex>\r\n\r\n        </br></br>\r\n        <!--Panels who permits to add a new action or demonstration-->\r\n        <AddingPanel :selected=\"selected\"\r\n                     :userGroups=\"userGroups\"\r\n                     :demonstrations=\"demonstrations\"\r\n                     :selectedActionIndex=\"selectedActionIndex\"\r\n                     :selectedDemoIndex=\"selectedDemoIndex\"></AddingPanel>\r\n\r\n        </br></br>\r\n\r\n        <!--Inbox who shows message received on the topics that the user has subscribed-->\r\n        <Inbox v-if=\"!this.connection\"\r\n               :subscribedTopics=\"subscribedTopics\"></Inbox>\r\n\r\n        <!--Connection PopUp-->\r\n        <ConnectionPopUp :connection=\"connection\"\r\n                         @connection=\"connection=$event\"\r\n                         :userGroups=\"userGroups\"\r\n                         @selectedUserGroup=\"selectedUserGroup=$event\"></ConnectionPopUp>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import ConnectionPopUp from \"./ConnectionPopUp\";\r\n    var utils= require('@/assets/js/Utils.js');\r\n    import {config} from '@/assets/js/Utils.js';\r\n    import axios from 'axios';\r\n    import Selector from './Selector.vue'\r\n    import ActionPanel from './ActionPanel.vue'\r\n    import PublishPanel from './PublishPanel.vue'\r\n    import SubscribePanel from './SubscribePanel.vue'\r\n    import AddingPanel from './AddingPanel.vue'\r\n    import Inbox from './Inbox.vue'\r\n\r\n    export default {\r\n        name: 'Body',\r\n        components:{\r\n            ConnectionPopUp,\r\n            Selector,\r\n            ActionPanel,\r\n            PublishPanel,\r\n            SubscribePanel,\r\n            AddingPanel,\r\n            Inbox\r\n        },\r\n        data: function () {\r\n\r\n            return {\r\n                //Panels variables\r\n                publishPanel: null,\r\n                actionPanel: null,\r\n\r\n                //Publish Panel content\r\n                messageToSend: '',\r\n                topic: '',\r\n\r\n                //Connection variables\r\n                connection: true,\r\n\r\n                //Demonstrations\r\n                selected: null,\r\n                demonstrations:[],\r\n                userGroups:[],\r\n                selectedUserGroup : {\r\n                    id:1,\r\n                    isSelected:false,\r\n                    name:'WLDD',\r\n                },\r\n\r\n                //Variables for Hashmaps\r\n                actualTopic : '',\r\n                actualMessage : '',\r\n\r\n                //Indexes\r\n                selectedDemoIndex : null,\r\n                selectedActionIndex : null,\r\n\r\n                //PopUps Variables\r\n                popUps : null,\r\n                deletePopUp:false,\r\n                editPopUp:false,\r\n\r\n                showBtn : 0,    //Variable for editing buttons\r\n\r\n                subscribedTopics : [],  //Tab who saves subscribed topics\r\n                oldValuesTab : [{\"key\":\"{{test}}\",\"value\":\"{{test}}\"}],  //Tab who saves last value used for a parameter\r\n            }\r\n        },\r\n\r\n        watch:{\r\n          selected:function(){\r\n              this.topic = '';\r\n              this.messageToSend = '';\r\n          }\r\n        },\r\n\r\n        //Permits to get all data when starting the website\r\n    mounted(){\r\n        axios\r\n            .get(config.baseLink+'/user/findAll')\r\n            .then((responses) =>{\r\n                this.userGroups = [];\r\n                this.userGroups = responses.data;\r\n                for(var i = 0; i<this.userGroups.length;i++)\r\n                {\r\n                    this.userGroups[i].isSelected=false;\r\n                }\r\n            }, (responses) =>{\r\n                console.log('erreur',responses);\r\n            })\r\n    },\r\n        methods: {\r\n            //Permits to import data from webservice database\r\n            update(callback=null){\r\n                axios\r\n                    .get(config.baseLink+'/demo/findByUserGroupId?userGroupId='+this.selectedUserGroup.id)\r\n                    .then((responses) =>{\r\n                        this.demonstrations = [];\r\n                        this.demonstrations=responses.data;\r\n                        for(var j=0;j<this.demonstrations.length;j++)\r\n                        {\r\n                            for(var i=0;i<this.demonstrations[j].action.length;i++)\r\n                            {\r\n                                this.demonstrations[j].action[i].demo=this.selected;\r\n                                this.demonstrations[j].action[i].isSelected=false;\r\n                                this.demonstrations[j].action[i].topicSubscribe=this.demonstrations[j].action[i].topic;\r\n                                this.demonstrations[j].action[i].topicOriginal=this.demonstrations[j].action[i].topic;\r\n                                this.demonstrations[j].action[i].messageOriginal=this.demonstrations[j].action[i].message;\r\n                                this.demonstrations[j].action[i].messageOriginal=this.demonstrations[j].action[i].message;\r\n                            }\r\n                        }\r\n                        if(this.selected!=null)\r\n                        {\r\n                            this.selected = this.demonstrations.filter(demonstration => demonstration.id == this.selected.id)[0];\r\n                        }\r\n                        if(callback!=null){\r\n                            callback();\r\n                        }\r\n                    }, (response)=>{\r\n                    console.log('erreur',response)\r\n                })\r\n            },\r\n\r\n            //Permits to fill the publish panel when we select an action\r\n            assignTopic(action) {\r\n                this.topic = action.topic;\r\n                this.actualTopic = action.topicOriginal;\r\n                this.messageToSend = action.message;\r\n                this.actualMessage = action.messageOriginal;\r\n                this.publishPanel = 0;\r\n                this.selectedActionIndex = this.demonstrations[this.selectedDemoIndex].action.indexOf(action);\r\n                this.popUps = 1;\r\n                this.showBtn = 1;\r\n\r\n            }\r\n        },\r\n    }\r\n</script>\r\n\r\n"]}]}