{"remainingRequest":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\WEB\\WLDD_hiveMQ\\src\\components\\SubscribePanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\WEB\\WLDD_hiveMQ\\src\\components\\SubscribePanel.vue","mtime":1558627071497},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar HashMap = require('hashmap');\nimport {subscribeMQTT} from '@/assets/js/Utils.js';\n\nexport default {\n    name: 'SubscribePanel',\n    props: {\n        'selected': Object,\n        'demonstrations': Array,\n    },\n    data: function () {\n        return {\n            popUpSubscribe: 0,\n            parametersMap: new HashMap(),\n            topicOriginal: '',\n            topicSubscribe: '',\n            addTopic : 0,\n            newTopicSubscription : '',\n            defaultMap: new HashMap(),\n            topicSubscribed : [],\n        }\n    },\n    methods: {\n        //Permits to replace parameters\n        replaceText() {\n            for (var i = 0; i < this.parametersMap.size; i++) {\n                this.demonstrations.some(element => {\n                    element.action.some(act => {\n                        if (act.topicOriginal == this.topicOriginal) {\n                            act.topicSubscribe = this.topicSubscribe.replace(this.parametersMap.keys()[i], this.parametersMap.values()[i]);\n                            this.topicSubscribe = act.topicSubscribe;\n                            return true;\n                        }\n                    })\n                });\n            }\n            this.popUpSubscribe = 0;\n            this.parametersMap = new HashMap();\n            this.defaultMap = new HashMap();\n        },\n\n        //Permits to show parameters popUp for the topic we want to subscribe at\n        showPopUpSubscribe(action) {\n            const regex = /\\{\\{[a-zA-Z0-9]*\\}\\}/gm;\n            this.topicSubscribe = action.topicOriginal;\n            this.topicOriginal = action.topicOriginal;\n            action.topicSubscribe = action.topicOriginal;\n            let matches = action.topicOriginal.matchAll(regex);\n            for (const match of matches) {\n                this.parametersMap.set(match[0], match[0]);\n                this.defaultMap.set(match[0], action.parametersTopics.filter(element => element.parameter == match[0])[0].parameterDefaultValue);\n            }\n            if (this.parametersMap.size > 0) {\n                this.popUpSubscribe = 1;\n            }\n        },\n\n        //Permits to subscribe to a topic\n        subscribeTopic() {\n            this.selected.action.forEach((action) => {\n                if (action.isSelected) {\n                    subscribeMQTT(action.topicSubscribe);\n                    console.log('coucou');\n                    if(this.topicSubscribe.filter(topic => topic != action.topicSubscribe.name)[0]!=null){\n                        this.topicSubscribe.push(action.topicSubscribe.name);\n                    }\n                }\n            })\n        },\n\n        subscribeNewTopic(){\n            subscribeMQTT(this.newTopicSubscription);\n            this.cancelNewTopicSubscribtion();\n        },\n\n        setDefaultValue(index) {\n            this.parametersMap.set(this.parametersMap.keys()[index-1], this.defaultMap.values()[index-1]);\n                this.$refs.parameterContent[index-1].value=this.defaultMap.values()[index-1];\n        },\n\n        setValue(index,$event){\n            this.parametersMap.set(this.parametersMap.keys()[index-1],$event);\n                this.$refs.parameterContent[index-1].value=$event;\n        },\n\n        cancelNewTopicSubscribtion(){\n            this.newTopicSubscription = '';\n            this.addTopic = 0;\n        }\n    }\n}\n",{"version":3,"sources":["SubscribePanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2IA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"SubscribePanel.vue","sourceRoot":"src/components","sourcesContent":["<!--Subscribe panel permitting to subscribe to certain topics and receive message from them-->\r\n<template>\r\n    <v-flex>\r\n        <v-flex>\r\n            <v-expansion-panel v-if=\"selected!=null\">\r\n                <v-expansion-panel-content>\r\n                    <template v-slot:header>\r\n                        <div class=\"strongTexts\">Subscribe</div>\r\n                    </template>\r\n\r\n                    <v-card>\r\n                        <div class=\"subscribesGroup\">\r\n                            <v-flex v-for=\"action in selected.action\"\r\n                                    md4\r\n                                    offset-md1>\r\n                                <v-flex d-flex>\r\n                                    <!--Checkboxes to select certain topics-->\r\n                                    <v-checkbox v-model=\"action.isSelected\"></v-checkbox>\r\n\r\n                                    <div slot=\"label\"\r\n                                         class=\"checkBoxesLabels\"\r\n                                         @click=\"showPopUpSubscribe(action)\">\r\n                                        {{action.name}}\r\n                                    </div>\r\n                                </v-flex>\r\n                            </v-flex>\r\n\r\n                            <v-flex>\r\n                                <!--Subscribe button permitting to subscribe to the topics selected by the user-->\r\n                                <v-btn id=\"subscribeButton\"\r\n                                       color=rgba(0,103,160,1)\r\n                                       @click=\"subscribeTopic()\">\r\n                                    <div class=\"button\">Subscribe</div>\r\n                                </v-btn>\r\n\r\n                                <v-btn id=\"subscribeButton\"\r\n                                       color=rgba(0,103,160,1)\r\n                                       @click=\"addTopic = 1\">\r\n                                    <div class=\"button\">Add Topic Subscribtion</div>\r\n                                </v-btn>\r\n                            </v-flex>\r\n                        </div>\r\n                    </v-card>\r\n                </v-expansion-panel-content>\r\n            </v-expansion-panel>\r\n        </v-flex>\r\n\r\n        <!--PopUp permitting to change parameters to the topic we want to subscribe at-->\r\n        <v-dialog\r\n                v-model=\"popUpSubscribe\"\r\n                width=\"500\"\r\n                persistent=\"\">\r\n            <template v-slot:activator=\"{ on }\">\r\n\r\n            </template>\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    Fill parameters for Topic\r\n                </v-card-title>\r\n\r\n                </br>\r\n\r\n                <v-flex d-flex\r\n                        v-for=\"index in parametersMap.size\">\r\n                    <v-flex md3 offset-md1>\r\n                        <div class=\"parameters\">\r\n                            {{parametersMap.keys()[index-1]}}\r\n                        </div>\r\n                    </v-flex>\r\n                    <v-flex md6 d-flex>\r\n                        <v-text-field\r\n                                ref=\"parameterContent\"\r\n                                @change=\"setValue(index,$event)\"\r\n                                :label=\"defaultMap.values()[index-1]\"\r\n                                solo>\r\n                        </v-text-field>\r\n                        <div class=\"defaultValueButton\">\r\n                            <v-btn fab\r\n                                   small\r\n                                   @click=\"setDefaultValue(index)\"></v-btn>\r\n                        </div>\r\n                    </v-flex>\r\n                </v-flex>\r\n\r\n                <v-card-actions>\r\n                    <v-spacer></v-spacer>\r\n\r\n                    <v-btn\r\n                            color=\"primary\"\r\n                            flat\r\n                            @click=\"replaceText()\">\r\n                        Apply\r\n                    </v-btn>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-dialog>\r\n\r\n        <v-dialog\r\n                v-model=\"addTopic\"\r\n                width=\"500\"\r\n                persistent=\"\">\r\n            <template v-slot:activator=\"{ on }\">\r\n\r\n            </template>\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    Enter topic\r\n                </v-card-title>\r\n\r\n                <v-text-field v-model=\"newTopicSubscription\"\r\n                              label=\"Topic\"\r\n                              solo>\r\n                </v-text-field>\r\n\r\n                <v-card-actions>\r\n                    <v-btn color=\"primary\"\r\n                           flat\r\n                           @click=\"cancelNewTopicSubscribtion()\">\r\n                        Cancel\r\n                    </v-btn>\r\n\r\n                    <v-spacer></v-spacer>\r\n\r\n                    <v-btn  color=\"primary\"\r\n                            flat\r\n                            @click=\"subscribeNewTopic()\">\r\n                        Add\r\n                    </v-btn>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-dialog>\r\n    </v-flex>\r\n</template>\r\n\r\n<script>\r\n    var HashMap = require('hashmap');\r\n    import {subscribeMQTT} from '@/assets/js/Utils.js';\r\n\r\n    export default {\r\n        name: 'SubscribePanel',\r\n        props: {\r\n            'selected': Object,\r\n            'demonstrations': Array,\r\n        },\r\n        data: function () {\r\n            return {\r\n                popUpSubscribe: 0,\r\n                parametersMap: new HashMap(),\r\n                topicOriginal: '',\r\n                topicSubscribe: '',\r\n                addTopic : 0,\r\n                newTopicSubscription : '',\r\n                defaultMap: new HashMap(),\r\n                topicSubscribed : [],\r\n            }\r\n        },\r\n        methods: {\r\n            //Permits to replace parameters\r\n            replaceText() {\r\n                for (var i = 0; i < this.parametersMap.size; i++) {\r\n                    this.demonstrations.some(element => {\r\n                        element.action.some(act => {\r\n                            if (act.topicOriginal == this.topicOriginal) {\r\n                                act.topicSubscribe = this.topicSubscribe.replace(this.parametersMap.keys()[i], this.parametersMap.values()[i]);\r\n                                this.topicSubscribe = act.topicSubscribe;\r\n                                return true;\r\n                            }\r\n                        })\r\n                    });\r\n                }\r\n                this.popUpSubscribe = 0;\r\n                this.parametersMap = new HashMap();\r\n                this.defaultMap = new HashMap();\r\n            },\r\n\r\n            //Permits to show parameters popUp for the topic we want to subscribe at\r\n            showPopUpSubscribe(action) {\r\n                const regex = /\\{\\{[a-zA-Z0-9]*\\}\\}/gm;\r\n                this.topicSubscribe = action.topicOriginal;\r\n                this.topicOriginal = action.topicOriginal;\r\n                action.topicSubscribe = action.topicOriginal;\r\n                let matches = action.topicOriginal.matchAll(regex);\r\n                for (const match of matches) {\r\n                    this.parametersMap.set(match[0], match[0]);\r\n                    this.defaultMap.set(match[0], action.parametersTopics.filter(element => element.parameter == match[0])[0].parameterDefaultValue);\r\n                }\r\n                if (this.parametersMap.size > 0) {\r\n                    this.popUpSubscribe = 1;\r\n                }\r\n            },\r\n\r\n            //Permits to subscribe to a topic\r\n            subscribeTopic() {\r\n                this.selected.action.forEach((action) => {\r\n                    if (action.isSelected) {\r\n                        subscribeMQTT(action.topicSubscribe);\r\n                        console.log('coucou');\r\n                        if(this.topicSubscribe.filter(topic => topic != action.topicSubscribe.name)[0]!=null){\r\n                            this.topicSubscribe.push(action.topicSubscribe.name);\r\n                        }\r\n                    }\r\n                })\r\n            },\r\n\r\n            subscribeNewTopic(){\r\n                subscribeMQTT(this.newTopicSubscription);\r\n                this.cancelNewTopicSubscribtion();\r\n            },\r\n\r\n            setDefaultValue(index) {\r\n                this.parametersMap.set(this.parametersMap.keys()[index-1], this.defaultMap.values()[index-1]);\r\n                    this.$refs.parameterContent[index-1].value=this.defaultMap.values()[index-1];\r\n            },\r\n\r\n            setValue(index,$event){\r\n                this.parametersMap.set(this.parametersMap.keys()[index-1],$event);\r\n                    this.$refs.parameterContent[index-1].value=$event;\r\n            },\r\n\r\n            cancelNewTopicSubscribtion(){\r\n                this.newTopicSubscription = '';\r\n                this.addTopic = 0;\r\n            }\r\n        }\r\n    }\r\n</script>"]}]}