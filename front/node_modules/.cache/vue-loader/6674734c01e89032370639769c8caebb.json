{"remainingRequest":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\WEB\\WLDD_hiveMQ\\src\\components\\AddingPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\WEB\\WLDD_hiveMQ\\src\\components\\AddingPanel.vue","mtime":1558605881273},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {config} from '@/assets/js/Utils.js';\nimport axios from 'axios';\nvar HashMap = require('hashmap');\n\nexport default {\n    name: \"AddingPanel\",\n    props:{\n        'selected' : Object,\n        'userGroups' : Array,\n        'demonstrations': Array,\n        'selectedActionIndex': Number,\n        'selectedDemoIndex': Number,\n    },\n    data: function () {\n        return {\n            //Adding variables\n            newDemoName:'',\n            newActionName:'',\n            newActionTopic:'',\n            newActionMessage:'',\n            userGroupList : '',\n            parametersMap: new HashMap(),\n            parametersIds: new HashMap(),\n            popUpMessage: 0,\n            popUpTopic: 0,\n            newDefaultValues:[],\n            addedPopUp : false,\n            type : '',\n        }\n    },\n    methods: {\n        //Permits to add a new demonstration\n        addDemo() {\n            this.userGroups.forEach(userGroup => {\n                if (userGroup.isSelected == true) {\n                    this.userGroupList = this.userGroupList + userGroup.id + '|';\n                    userGroup.isSelected = false;\n                }\n            })\n            axios\n                .post(config.baseLink + '/demo/addDemo?name=' + encodeURI(this.newDemoName) + '&userGroupsIds=' + encodeURI(this.userGroupList))\n                .then((responses) => {\n                    this.$parent.update();\n                    this.newDemoName = '';\n                    this.userGroupList = '';\n                    this.type = \"Demonstration\";\n                    this.addedPopUp = true;\n                }, (response) => {\n                    console.log('erreur', response)\n                })\n        },\n\n        //Permits to Add a new action for a demonstration\n        addAction() {\n            axios\n                .post(config.baseLink + '/action/addAction?demoId=' + this.selected.id + '&name=' + encodeURI(this.newActionName) + '&topic=' + encodeURI(this.newActionTopic) + '&message=' + encodeURI(this.newActionMessage))\n                .then((responses) => {\n                    this.$parent.update(()=>{\n                        this.showParamsPopUp('topic',this.$parent.demonstrations);\n                        this.newActionName = '';\n                        this.newActionMessage = '';\n                        this.newActionTopic = '';\n                        this.type = \"Action\";\n                        this.addedPopUp = true;\n                    });\n                }, (response) => {\n                    console.log('erreur', response)\n                })\n        },\n\n        showParamsPopUp(type,demonstrations) {\n            const regex = /\\{\\{[a-zA-Z0-9]*\\}\\}/gm;\n            let matches;\n            if (type == 'topic') {\n                matches = this.newActionTopic.matchAll(regex);\n            } else if (type == 'message') {\n                matches = this.newActionMessage.matchAll(regex);\n            }\n            for (const match of matches) {\n                this.parametersMap.set(match[0], match[0]);\n                if (type == 'topic') {\n                    this.parametersIds.set(match[0], demonstrations[this.selectedDemoIndex].action.filter(element => element.topic == this.newActionTopic)[0].parametersTopics.filter(element => element.parameter == match[0])[0].id);\n                } else if (type == 'message') {\n                    this.parametersIds.set(match[0], demonstrations[this.selectedDemoIndex].action.filter(element => element.message == this.newActionMessage)[0].parametersMessages.filter(element => element.parameter == match[0])[0].id);\n                }\n            }\n            if (this.parametersMap.size > 0) {\n                if (type == 'topic') {\n                    this.popUpTopic = 1;\n                } else if (type == 'message') {\n                    this.popUpMessage = 1;\n                }\n            } else {\n                if (type == 'topic') {\n                    this.$parent.update(() => {\n                        this.showParamsPopUp('message', this.$parent.demonstrations);\n                    });\n                }\n            }\n        },\n\n        closeParamEditing(){\n            this.popUpTopic = 0;\n            this.popUpMessage = 0;\n            this.parametersMap = new HashMap();\n            this.parametersIds = new HashMap();\n            this.newDefaultValues = [];\n        },\n\n        setDefaultParams(type)\n        {\n            for (var i = 0; i < this.parametersIds.size; i++) {\n                axios\n                    .post(config.baseLink + '/parameters/addDefaultParameterValue?parameterId=' + this.parametersIds.values()[i] + '&parameterValue=' + encodeURI(this.newDefaultValues[i]))\n                    .then((responses) => {\n                        if (type == 'topic') {\n                            this.$parent.update(() => {\n                                this.showParamsPopUp('message', this.$parent.demonstrations);\n                            });\n                            this.closeParamEditing();\n                        } else {\n                            this.$parent.update();\n                            this.closeParamEditing();\n                        }\n                    }, (response) => {\n                        console.log('erreur', response)\n                    })\n            }\n        }\n    }\n}\n",{"version":3,"sources":["AddingPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4MA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AddingPanel.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <v-flex d-flex offset-md1 md10 >\r\n        <v-flex  md6 xs6>\r\n            <v-expansion-panel>\r\n                <v-expansion-panel-content>\r\n                    <template v-slot:header>\r\n                        <div class=\"strongTexts\">Add Demonstration</div>\r\n                    </template>\r\n\r\n                    <v-flex offset-md1 md10>\r\n                        </br>\r\n\r\n\r\n                        <v-text-field\r\n                                label=\"Demonstration Name\"\r\n                                v-model=\"newDemoName\"\r\n                                box>\r\n                        </v-text-field>\r\n\r\n                        <div class=\"userGroups\">\r\n\r\n                              <v-flex v-for=\"userGroup in userGroups\">\r\n                                    <!--Checkboxes to select certain topics-->\r\n                                    <v-checkbox v-model=\"userGroup.isSelected\">\r\n                                        <div slot=\"label\">\r\n                                            {{userGroup.name}}\r\n                                        </div>\r\n                                    </v-checkbox>\r\n                            </v-flex>\r\n                        </div>\r\n\r\n                        <v-flex>\r\n                            <v-btn class=\"addButton\"\r\n                                   color=rgba(0,103,160,1)\r\n                                   @click=\"addDemo()\">\r\n                                <div class=\"button\">ADD DEMO</div>\r\n                            </v-btn>\r\n                        </v-flex>\r\n\r\n                    </v-flex>\r\n                </v-expansion-panel-content>\r\n            </v-expansion-panel>\r\n        </v-flex>\r\n\r\n        <v-flex offset-md1 md6 xs6 offset-xs1>\r\n            <v-expansion-panel v-if=\"selected!=null\">\r\n                <v-expansion-panel-content>\r\n                    <template v-slot:header>\r\n                        <div class=\"strongTexts\">Add Action</div>\r\n                    </template>\r\n\r\n                    <v-flex offset-md1 md10>\r\n                        </br>\r\n\r\n                        <v-text-field\r\n                                label=\"Action Name\"\r\n                                v-model=\"newActionName\"\r\n                                box>\r\n                        </v-text-field>\r\n\r\n                        <v-text-field\r\n                                label=\"Action Topic\"\r\n                                v-model=\"newActionTopic\"\r\n                                box>\r\n                        </v-text-field>\r\n\r\n                        <v-textarea\r\n                                label=\"Action Message\"\r\n                                v-model=\"newActionMessage\"\r\n                                box>\r\n                        </v-textarea>\r\n\r\n                        <v-flex>\r\n                            <v-btn class=\"addButton\"\r\n                                   color=rgba(0,103,160,1)\r\n                                   @click=\"addAction()\">\r\n                                <div class=\"button\">ADD ACTION</div>\r\n                            </v-btn>\r\n                        </v-flex>\r\n                    </v-flex>\r\n                </v-expansion-panel-content>\r\n            </v-expansion-panel>\r\n\r\n            <!--PopUp permitting to change parameters to the message to send-->\r\n            <v-dialog\r\n                    v-model=\"popUpMessage\"\r\n                    width=\"500\"\r\n                    persistent=\"\">\r\n                <template v-slot:activator=\"{ on }\">\r\n\r\n                </template>\r\n\r\n                <v-card>\r\n                    <v-card-title  class=\"headline grey lighten-2\"\r\n                                   primary-title>\r\n                        Fill default parameters for Message\r\n                    </v-card-title>\r\n\r\n                    </br>\r\n\r\n                    <v-flex d-flex\r\n                            v-for=\"index in parametersMap.size\">\r\n                        <v-flex md3 offset-md1>\r\n                            <div class=\"parameters\">\r\n                                {{parametersMap.keys()[index-1]}}\r\n                            </div>\r\n                        </v-flex>\r\n                        <v-flex md6 d-flex>\r\n                            <v-text-field\r\n                                    v-model=\"newDefaultValues[index-1]\"\r\n                                    solo>\r\n                            </v-text-field>\r\n                        </v-flex>\r\n                    </v-flex>\r\n\r\n                    <v-card-actions>\r\n                        <v-spacer></v-spacer>\r\n\r\n                        <v-btn\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"setDefaultParams('message')\">\r\n                            Apply\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </v-card>\r\n            </v-dialog>\r\n\r\n            <!--PopUp permitting to change parameters to the topic where we want to publish-->\r\n            <v-dialog\r\n                    v-model=\"popUpTopic\"\r\n                    width=\"500\"\r\n                    persistent=\"\">\r\n                <template v-slot:activator=\"{ on }\">\r\n\r\n                </template>\r\n\r\n                <v-card>\r\n                    <v-card-title  class=\"headline grey lighten-2\"\r\n                                   primary-title>\r\n                        Fill default parameters for Topic\r\n                    </v-card-title>\r\n\r\n                    </br>\r\n\r\n                    <v-flex d-flex\r\n                            v-for=\"index in parametersMap.size\">\r\n                        <v-flex md3 offset-md1>\r\n                            <div class=\"parameters\">\r\n                                {{parametersMap.keys()[index-1]}}\r\n                            </div>\r\n                        </v-flex>\r\n                        <v-flex md6 d-flex>\r\n                            <v-text-field\r\n                                    v-model=\"newDefaultValues[index-1]\"\r\n                                    solo>\r\n                            </v-text-field>\r\n                        </v-flex>\r\n                    </v-flex>\r\n\r\n                    <v-card-actions>\r\n                        <v-spacer></v-spacer>\r\n\r\n                        <v-btn\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"setDefaultParams('topic')\">\r\n                            Apply\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </v-card>\r\n            </v-dialog>\r\n\r\n            <v-dialog v-model=\"addedPopUp\"\r\n                      class=\"headline grey lighten-2\"\r\n                      primary-title\r\n                      max-width=\"250\">\r\n                <template v-slot:activator=\"{ on }\">\r\n\r\n                </template>\r\n\r\n                <v-card>\r\n                    <v-card-title  class=\"headline grey lighten-2\"\r\n                                   primary-title>\r\n                        {{type}} added\r\n                    </v-card-title>\r\n\r\n                    <v-card-actions>\r\n                        <v-spacer></v-spacer>\r\n\r\n                        <v-btn\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"addedPopUp=false\">\r\n                            Close\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </v-card>\r\n            </v-dialog>\r\n        </v-flex>\r\n    </v-flex>\r\n</template>\r\n\r\n<script>\r\n    import {config} from '@/assets/js/Utils.js';\r\n    import axios from 'axios';\r\n    var HashMap = require('hashmap');\r\n\r\n    export default {\r\n        name: \"AddingPanel\",\r\n        props:{\r\n            'selected' : Object,\r\n            'userGroups' : Array,\r\n            'demonstrations': Array,\r\n            'selectedActionIndex': Number,\r\n            'selectedDemoIndex': Number,\r\n        },\r\n        data: function () {\r\n            return {\r\n                //Adding variables\r\n                newDemoName:'',\r\n                newActionName:'',\r\n                newActionTopic:'',\r\n                newActionMessage:'',\r\n                userGroupList : '',\r\n                parametersMap: new HashMap(),\r\n                parametersIds: new HashMap(),\r\n                popUpMessage: 0,\r\n                popUpTopic: 0,\r\n                newDefaultValues:[],\r\n                addedPopUp : false,\r\n                type : '',\r\n            }\r\n        },\r\n        methods: {\r\n            //Permits to add a new demonstration\r\n            addDemo() {\r\n                this.userGroups.forEach(userGroup => {\r\n                    if (userGroup.isSelected == true) {\r\n                        this.userGroupList = this.userGroupList + userGroup.id + '|';\r\n                        userGroup.isSelected = false;\r\n                    }\r\n                })\r\n                axios\r\n                    .post(config.baseLink + '/demo/addDemo?name=' + encodeURI(this.newDemoName) + '&userGroupsIds=' + encodeURI(this.userGroupList))\r\n                    .then((responses) => {\r\n                        this.$parent.update();\r\n                        this.newDemoName = '';\r\n                        this.userGroupList = '';\r\n                        this.type = \"Demonstration\";\r\n                        this.addedPopUp = true;\r\n                    }, (response) => {\r\n                        console.log('erreur', response)\r\n                    })\r\n            },\r\n\r\n            //Permits to Add a new action for a demonstration\r\n            addAction() {\r\n                axios\r\n                    .post(config.baseLink + '/action/addAction?demoId=' + this.selected.id + '&name=' + encodeURI(this.newActionName) + '&topic=' + encodeURI(this.newActionTopic) + '&message=' + encodeURI(this.newActionMessage))\r\n                    .then((responses) => {\r\n                        this.$parent.update(()=>{\r\n                            this.showParamsPopUp('topic',this.$parent.demonstrations);\r\n                            this.newActionName = '';\r\n                            this.newActionMessage = '';\r\n                            this.newActionTopic = '';\r\n                            this.type = \"Action\";\r\n                            this.addedPopUp = true;\r\n                        });\r\n                    }, (response) => {\r\n                        console.log('erreur', response)\r\n                    })\r\n            },\r\n\r\n            showParamsPopUp(type,demonstrations) {\r\n                const regex = /\\{\\{[a-zA-Z0-9]*\\}\\}/gm;\r\n                let matches;\r\n                if (type == 'topic') {\r\n                    matches = this.newActionTopic.matchAll(regex);\r\n                } else if (type == 'message') {\r\n                    matches = this.newActionMessage.matchAll(regex);\r\n                }\r\n                for (const match of matches) {\r\n                    this.parametersMap.set(match[0], match[0]);\r\n                    if (type == 'topic') {\r\n                        this.parametersIds.set(match[0], demonstrations[this.selectedDemoIndex].action.filter(element => element.topic == this.newActionTopic)[0].parametersTopics.filter(element => element.parameter == match[0])[0].id);\r\n                    } else if (type == 'message') {\r\n                        this.parametersIds.set(match[0], demonstrations[this.selectedDemoIndex].action.filter(element => element.message == this.newActionMessage)[0].parametersMessages.filter(element => element.parameter == match[0])[0].id);\r\n                    }\r\n                }\r\n                if (this.parametersMap.size > 0) {\r\n                    if (type == 'topic') {\r\n                        this.popUpTopic = 1;\r\n                    } else if (type == 'message') {\r\n                        this.popUpMessage = 1;\r\n                    }\r\n                } else {\r\n                    if (type == 'topic') {\r\n                        this.$parent.update(() => {\r\n                            this.showParamsPopUp('message', this.$parent.demonstrations);\r\n                        });\r\n                    }\r\n                }\r\n            },\r\n\r\n            closeParamEditing(){\r\n                this.popUpTopic = 0;\r\n                this.popUpMessage = 0;\r\n                this.parametersMap = new HashMap();\r\n                this.parametersIds = new HashMap();\r\n                this.newDefaultValues = [];\r\n            },\r\n\r\n            setDefaultParams(type)\r\n            {\r\n                for (var i = 0; i < this.parametersIds.size; i++) {\r\n                    axios\r\n                        .post(config.baseLink + '/parameters/addDefaultParameterValue?parameterId=' + this.parametersIds.values()[i] + '&parameterValue=' + encodeURI(this.newDefaultValues[i]))\r\n                        .then((responses) => {\r\n                            if (type == 'topic') {\r\n                                this.$parent.update(() => {\r\n                                    this.showParamsPopUp('message', this.$parent.demonstrations);\r\n                                });\r\n                                this.closeParamEditing();\r\n                            } else {\r\n                                this.$parent.update();\r\n                                this.closeParamEditing();\r\n                            }\r\n                        }, (response) => {\r\n                            console.log('erreur', response)\r\n                        })\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n\r\n"]}]}