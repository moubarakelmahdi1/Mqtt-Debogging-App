{"remainingRequest":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\WEB\\WLDD_hiveMQ\\src\\components\\PublishPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\WEB\\WLDD_hiveMQ\\src\\components\\PublishPanel.vue","mtime":1560773062458},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {publishMQTT} from '@/assets/js/Utils.js';\nvar HashMap = require('hashmap');\nexport default {\n    name: 'PublishPanel',\n    props: {\n        'publishPanel': Number,\n        'topic': String,\n        'messageToSend': String,\n        'actualTopic': String,\n        'actualMessage': String,\n        'demonstrations': Array,\n        'selectedActionIndex': Number,\n        'selectedDemoIndex': Number,\n        'popUps' : Number,\n        'oldValuesTab' : Array\n    },\n    data: function () {\n        return {\n            showPublishPanel: this.publishPanel,\n            publishTopic: this.topic,\n            message: this.messageToSend,\n            popUpMessage: 0,\n            popUpTopic: 0,\n            parametersMap: new HashMap(),\n            originalTopic: this.actualTopic,\n            originalMessage: this.actualMessage,\n            defaultMap: new HashMap(),\n            content:'',\n            showPopUps : this.popUps,\n            oldValues : [{\"key\":\"{{key}}\",\"value\":\"{{value}}\"}],\n        }\n    },\n    watch: {\n        publishTopic: function () {\n            this.$emit('topic', this.publishTopic);\n        },\n        topic: function () {\n            this.publishTopic = this.topic;\n        },\n        message: function () {\n            this.$emit('messageToSend', this.message);\n        },\n        messageToSend: function () {\n            this.message = this.messageToSend;\n        },\n        actualTopic: function () {\n            this.originalTopic = this.actualTopic;\n        },\n        actualMessage: function () {\n            this.originalMessage = this.actualMessage;\n        },\n        publishPanel: function () {\n            this.showPublishPanel = this.publishPanel;\n        },\n        popUps:function(){\n            this.showPopUps = this.popUps;\n        },\n        showPopUps:function(){\n            this.$emit('popUps', this.showPopUps);\n            if(this.showPopUps){\n                this.showPopUp('topic');\n            }\n        },\n        oldValues:function(){\n            this.$emit('oldValuesTab',this.oldValues);\n        },\n        oldValuesTab:function(){\n            this.oldValues = this.oldValuesTab;\n        }\n    },\n    methods: {\n        publish() {\n            if(this.publishTopic.length>0)\n            {\n                publishMQTT(this.publishTopic, this.message);\n\n            }\n            else{\n                alert('Fill topic where to publish!');\n            }\n        },\n        //Permits to show parameters popUp for the topic and the message we choosed\n        showPopUp(type) {\n            const regex = /\\{\\{[a-zA-Z0-9]*\\}\\}/gm;\n            let matches;\n            if (type == 'topic') {\n                matches = this.originalTopic.matchAll(regex);\n            } else if (type == 'message') {\n                matches = this.originalMessage.matchAll(regex);\n            }\n            for (const match of matches) {\n                this.parametersMap.set(match[0], match[0]);\n                if(type=='topic')\n                {\n                    this.defaultMap.set(match[0], this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].parametersTopics.filter(element => element.parameter == match[0])[0].parameterDefaultValue);\n                }\n                else if(type=='message'){\n                    this.defaultMap.set(match[0], this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].parametersMessages.filter(element => element.parameter == match[0])[0].parameterDefaultValue);\n                }\n            }\n            if (this.parametersMap.size > 0) {\n                if (type == 'topic') {\n                    this.publishTopic = this.originalTopic;\n                    this.popUpTopic = 1;\n                } else if (type == 'message') {\n                    this.message = this.originalMessage;\n                    this.popUpMessage = 1;\n                }\n            }\n            else{\n                if(type=='topic'){\n                    this.showPopUp('message');\n                    this.showPopUps=0;\n                }\n\n            }\n        },\n        //Permits to replace parameters\n        replaceText(type) {\n            for (var i = 0; i < this.parametersMap.size; i++) {\n                if (type == 'topic') {\n                    this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].topic = this.publishTopic.replace(this.parametersMap.keys()[i], this.parametersMap.values()[i]);\n                    this.publishTopic = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].topic;\n                } else if (type == 'message') {\n                    this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].message = this.message.replace(this.parametersMap.keys()[i], this.parametersMap.values()[i]);\n                    this.message = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].message;\n                }\n                var temp = new Object();\n                var res=1;\n                temp.key = this.parametersMap.keys()[i];\n                temp.value = this.parametersMap.values()[i];\n                for(var j=0;j<this.oldValues.length;j++){\n                    if(this.oldValues[i].key==temp.key){\n                        this.oldValues[i].value = this.parametersMap.values()[i];\n                        res=0;\n                    }\n                }\n                if(res){\n                    this.oldValues.push(temp);\n                }\n            }\n            this.closePopUp();\n            if(type=='topic'){\n                this.showPopUp('message');\n                this.showPopUps=0;\n            }\n        },\n        setDefaultValue(type,index) {\n            this.parametersMap.set(this.parametersMap.keys()[index-1], this.defaultMap.values()[index-1]);\n            if(type=='topic'){\n                this.$refs.parameterContentTopic[index-1].value=this.defaultMap.values()[index-1];\n            }\n            else if(type=='message')\n            {\n                this.$refs.parameterContentMessage[index-1].value=this.defaultMap.values()[index-1];\n            }\n        },\n        setValue(type,index,$event){\n            this.parametersMap.set(this.parametersMap.keys()[index-1],$event);\n            if(type=='topic'){\n                this.$refs.parameterContentTopic[index-1].value=$event;\n            }\n            else if(type=='message')\n            {\n                this.$refs.parameterContentMessage[index-1].value=$event;\n            }\n        },\n        closePopUp(type){\n            this.parametersMap = new HashMap();\n            this.defaultMap = new HashMap();\n            this.popUpMessage = 0;\n            this.popUpTopic = 0;\n            this.showPopUps=0;\n            if(type=='topic'){\n                this.showPopUp('message');\n                this.showPopUps=0;\n            }\n        },\n        setOldValue(type,index) {\n            var temp=this.findOldValue(index);\n            this.parametersMap.set(this.parametersMap.keys()[index-1],temp );\n            if(type=='topic'){\n                this.$refs.parameterContentTopic[index-1].value=temp;\n            }\n            else if(type=='message')\n            {\n                this.$refs.parameterContentMessage[index-1].value=temp;\n            }\n        },\n        findOldValue(index){\n            var temp='';\n            for(var i=0;i<this.oldValues.length;i++){\n                if(this.oldValues[i].key==this.parametersMap.keys()[index-1]){\n                    temp = this.oldValues[i].value;\n                    this.parametersMap.set(this.oldValues[i].key,temp);\n                }\n            }\n            return temp;\n        }\n    }\n}\n",{"version":3,"sources":["PublishPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"PublishPanel.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <v-flex>\r\n        <!--Publish panel permitting to send a message to a certain topic-->\r\n        <v-flex>\r\n            <v-expansion-panel v-model=\"showPublishPanel\">\r\n                <v-expansion-panel-content>\r\n                    <template v-slot:header>\r\n                        <div class=\"strongTexts\">Publish</div>\r\n                    </template>\r\n\r\n                    <v-form @submit.prevent>\r\n                        <v-layout>\r\n                            <v-flex md10 offset-md1>\r\n\r\n                                </br>\r\n\r\n                                <v-text-field\r\n                                        v-model=\"publishTopic\"\r\n                                        label=\"Topic\"\r\n                                        box>\r\n                                </v-text-field>\r\n\r\n                                </br>\r\n\r\n                                <v-textarea\r\n                                        v-model=\"message\"\r\n                                        label=\"Message\"\r\n                                        box\r\n                                ></v-textarea>\r\n                            </v-flex>\r\n                        </v-layout>\r\n\r\n                        <!--Publish button who send the message to the topic choosed by the user-->\r\n                        <v-flex>\r\n                            <v-btn  type=\"submit\"\r\n                                    class=\"addButton\"\r\n                                   color=rgba(0,103,160,1)\r\n                                   @click=\"publish()\">\r\n                                <div class=\"button\">Publish</div>\r\n                            </v-btn>\r\n                        </v-flex>\r\n                    </v-form>\r\n                </v-expansion-panel-content>\r\n            </v-expansion-panel>\r\n        </v-flex>\r\n\r\n        <!--PopUp permitting to change parameters to the message to send-->\r\n        <v-dialog\r\n                v-model=\"popUpMessage\"\r\n                width=\"500\"\r\n                persistent=\"\">\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    Fill parameters for Message\r\n                </v-card-title>\r\n\r\n                </br>\r\n\r\n                <v-form @submit.prevent>\r\n                    <v-flex d-flex\r\n                            v-for=\"index in parametersMap.size\">\r\n                        <v-flex md3 offset-md1>\r\n                            <div class=\"parameters\">\r\n                                {{parametersMap.keys()[index-1]}}\r\n                            </div>\r\n                        </v-flex>\r\n                        <v-flex md8 d-flex>\r\n                            <v-text-field\r\n                                    ref=\"parameterContentMessage\"\r\n                                    @change=\"setValue('message',index,$event)\"\r\n                                    :value=\"findOldValue(index)\"\r\n                                    solo>\r\n                            </v-text-field>\r\n                            <div class=\"defaultValuebutton\">\r\n                                <v-tooltip top>\r\n                                    <template v-slot:activator=\"{ on }\">\r\n                                        <v-btn fab small @click=\"setDefaultValue('message',index)\" v-on=\"on\">\r\n                                            <v-icon dark>build</v-icon>\r\n                                        </v-btn>\r\n                                    </template>\r\n                                    <span>{{defaultMap.values()[index-1]}}</span>\r\n                                </v-tooltip>\r\n                                <v-btn fab small v-if=\"findOldValue(index)!=''\" @click=\"setOldValue('message',index)\">\r\n                                    <v-icon dark>backup</v-icon>\r\n                                </v-btn>\r\n                            </div>\r\n                        </v-flex>\r\n                    </v-flex>\r\n\r\n                    <v-card-actions>\r\n                        <v-btn\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"closePopUp('message')\">\r\n                            Cancel\r\n                        </v-btn>\r\n\r\n                        <v-spacer></v-spacer>\r\n\r\n                        <v-btn  type=\"submit\"\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"replaceText('message')\">\r\n                            Apply\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </v-form>\r\n\r\n            </v-card>\r\n        </v-dialog>\r\n\r\n        <!--PopUp permitting to change parameters to the topic where we want to publish-->\r\n        <v-dialog\r\n                v-model=\"popUpTopic\"\r\n                width=\"500\"\r\n                persistent=\"\">\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    Fill parameters for Topic\r\n                </v-card-title>\r\n\r\n                </br>\r\n\r\n                <v-form @submit.prevent>\r\n                    <v-flex d-flex\r\n                            v-for=\"index in parametersMap.size\">\r\n                        <v-flex md3 offset-md1>\r\n                            <div class=\"parameters\">\r\n                                {{parametersMap.keys()[index-1]}}\r\n                            </div>\r\n                        </v-flex>\r\n                        <v-flex md8 d-flex>\r\n                            <v-text-field\r\n                                    ref=\"parameterContentTopic\"\r\n                                    @change=\"setValue('topic',index,$event)\"\r\n                                    :value=\"findOldValue(index)\"\r\n                                    solo>\r\n                            </v-text-field>\r\n                            <div class=\"defaultValuebutton\">\r\n                                <v-tooltip top>\r\n                                    <template v-slot:activator=\"{ on }\">\r\n                                        <v-btn fab small @click=\"setDefaultValue('topic',index)\" v-on=\"on\">\r\n                                            <v-icon dark>build</v-icon>\r\n                                        </v-btn>\r\n                                    </template>\r\n                                    <span>{{defaultMap.values()[index-1]}}</span>\r\n                                </v-tooltip>\r\n                                <v-btn fab small v-if=\"findOldValue(index)!=''\" @click=\"setOldValue('topic',index)\">\r\n                                    <v-icon dark>backup</v-icon>\r\n                                </v-btn>\r\n                            </div>\r\n                        </v-flex>\r\n                    </v-flex>\r\n\r\n                    <v-card-actions>\r\n                        <v-btn\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"closePopUp('topic')\">\r\n                            Cancel\r\n                        </v-btn>\r\n\r\n                        <v-spacer></v-spacer>\r\n\r\n                        <v-btn  type=\"submit\"\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"replaceText('topic')\">\r\n                            Apply\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </v-form>\r\n            </v-card>\r\n        </v-dialog>\r\n    </v-flex>\r\n</template>\r\n\r\n<script>\r\n    import {publishMQTT} from '@/assets/js/Utils.js';\r\n    var HashMap = require('hashmap');\r\n    export default {\r\n        name: 'PublishPanel',\r\n        props: {\r\n            'publishPanel': Number,\r\n            'topic': String,\r\n            'messageToSend': String,\r\n            'actualTopic': String,\r\n            'actualMessage': String,\r\n            'demonstrations': Array,\r\n            'selectedActionIndex': Number,\r\n            'selectedDemoIndex': Number,\r\n            'popUps' : Number,\r\n            'oldValuesTab' : Array\r\n        },\r\n        data: function () {\r\n            return {\r\n                showPublishPanel: this.publishPanel,\r\n                publishTopic: this.topic,\r\n                message: this.messageToSend,\r\n                popUpMessage: 0,\r\n                popUpTopic: 0,\r\n                parametersMap: new HashMap(),\r\n                originalTopic: this.actualTopic,\r\n                originalMessage: this.actualMessage,\r\n                defaultMap: new HashMap(),\r\n                content:'',\r\n                showPopUps : this.popUps,\r\n                oldValues : [{\"key\":\"{{key}}\",\"value\":\"{{value}}\"}],\r\n            }\r\n        },\r\n        watch: {\r\n            publishTopic: function () {\r\n                this.$emit('topic', this.publishTopic);\r\n            },\r\n            topic: function () {\r\n                this.publishTopic = this.topic;\r\n            },\r\n            message: function () {\r\n                this.$emit('messageToSend', this.message);\r\n            },\r\n            messageToSend: function () {\r\n                this.message = this.messageToSend;\r\n            },\r\n            actualTopic: function () {\r\n                this.originalTopic = this.actualTopic;\r\n            },\r\n            actualMessage: function () {\r\n                this.originalMessage = this.actualMessage;\r\n            },\r\n            publishPanel: function () {\r\n                this.showPublishPanel = this.publishPanel;\r\n            },\r\n            popUps:function(){\r\n                this.showPopUps = this.popUps;\r\n            },\r\n            showPopUps:function(){\r\n                this.$emit('popUps', this.showPopUps);\r\n                if(this.showPopUps){\r\n                    this.showPopUp('topic');\r\n                }\r\n            },\r\n            oldValues:function(){\r\n                this.$emit('oldValuesTab',this.oldValues);\r\n            },\r\n            oldValuesTab:function(){\r\n                this.oldValues = this.oldValuesTab;\r\n            }\r\n        },\r\n        methods: {\r\n            publish() {\r\n                if(this.publishTopic.length>0)\r\n                {\r\n                    publishMQTT(this.publishTopic, this.message);\r\n\r\n                }\r\n                else{\r\n                    alert('Fill topic where to publish!');\r\n                }\r\n            },\r\n            //Permits to show parameters popUp for the topic and the message we choosed\r\n            showPopUp(type) {\r\n                const regex = /\\{\\{[a-zA-Z0-9]*\\}\\}/gm;\r\n                let matches;\r\n                if (type == 'topic') {\r\n                    matches = this.originalTopic.matchAll(regex);\r\n                } else if (type == 'message') {\r\n                    matches = this.originalMessage.matchAll(regex);\r\n                }\r\n                for (const match of matches) {\r\n                    this.parametersMap.set(match[0], match[0]);\r\n                    if(type=='topic')\r\n                    {\r\n                        this.defaultMap.set(match[0], this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].parametersTopics.filter(element => element.parameter == match[0])[0].parameterDefaultValue);\r\n                    }\r\n                    else if(type=='message'){\r\n                        this.defaultMap.set(match[0], this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].parametersMessages.filter(element => element.parameter == match[0])[0].parameterDefaultValue);\r\n                    }\r\n                }\r\n                if (this.parametersMap.size > 0) {\r\n                    if (type == 'topic') {\r\n                        this.publishTopic = this.originalTopic;\r\n                        this.popUpTopic = 1;\r\n                    } else if (type == 'message') {\r\n                        this.message = this.originalMessage;\r\n                        this.popUpMessage = 1;\r\n                    }\r\n                }\r\n                else{\r\n                    if(type=='topic'){\r\n                        this.showPopUp('message');\r\n                        this.showPopUps=0;\r\n                    }\r\n\r\n                }\r\n            },\r\n            //Permits to replace parameters\r\n            replaceText(type) {\r\n                for (var i = 0; i < this.parametersMap.size; i++) {\r\n                    if (type == 'topic') {\r\n                        this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].topic = this.publishTopic.replace(this.parametersMap.keys()[i], this.parametersMap.values()[i]);\r\n                        this.publishTopic = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].topic;\r\n                    } else if (type == 'message') {\r\n                        this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].message = this.message.replace(this.parametersMap.keys()[i], this.parametersMap.values()[i]);\r\n                        this.message = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].message;\r\n                    }\r\n                    var temp = new Object();\r\n                    var res=1;\r\n                    temp.key = this.parametersMap.keys()[i];\r\n                    temp.value = this.parametersMap.values()[i];\r\n                    for(var j=0;j<this.oldValues.length;j++){\r\n                        if(this.oldValues[i].key==temp.key){\r\n                            this.oldValues[i].value = this.parametersMap.values()[i];\r\n                            res=0;\r\n                        }\r\n                    }\r\n                    if(res){\r\n                        this.oldValues.push(temp);\r\n                    }\r\n                }\r\n                this.closePopUp();\r\n                if(type=='topic'){\r\n                    this.showPopUp('message');\r\n                    this.showPopUps=0;\r\n                }\r\n            },\r\n            setDefaultValue(type,index) {\r\n                this.parametersMap.set(this.parametersMap.keys()[index-1], this.defaultMap.values()[index-1]);\r\n                if(type=='topic'){\r\n                    this.$refs.parameterContentTopic[index-1].value=this.defaultMap.values()[index-1];\r\n                }\r\n                else if(type=='message')\r\n                {\r\n                    this.$refs.parameterContentMessage[index-1].value=this.defaultMap.values()[index-1];\r\n                }\r\n            },\r\n            setValue(type,index,$event){\r\n                this.parametersMap.set(this.parametersMap.keys()[index-1],$event);\r\n                if(type=='topic'){\r\n                    this.$refs.parameterContentTopic[index-1].value=$event;\r\n                }\r\n                else if(type=='message')\r\n                {\r\n                    this.$refs.parameterContentMessage[index-1].value=$event;\r\n                }\r\n            },\r\n            closePopUp(type){\r\n                this.parametersMap = new HashMap();\r\n                this.defaultMap = new HashMap();\r\n                this.popUpMessage = 0;\r\n                this.popUpTopic = 0;\r\n                this.showPopUps=0;\r\n                if(type=='topic'){\r\n                    this.showPopUp('message');\r\n                    this.showPopUps=0;\r\n                }\r\n            },\r\n            setOldValue(type,index) {\r\n                var temp=this.findOldValue(index);\r\n                this.parametersMap.set(this.parametersMap.keys()[index-1],temp );\r\n                if(type=='topic'){\r\n                    this.$refs.parameterContentTopic[index-1].value=temp;\r\n                }\r\n                else if(type=='message')\r\n                {\r\n                    this.$refs.parameterContentMessage[index-1].value=temp;\r\n                }\r\n            },\r\n            findOldValue(index){\r\n                var temp='';\r\n                for(var i=0;i<this.oldValues.length;i++){\r\n                    if(this.oldValues[i].key==this.parametersMap.keys()[index-1]){\r\n                        temp = this.oldValues[i].value;\r\n                        this.parametersMap.set(this.oldValues[i].key,temp);\r\n                    }\r\n                }\r\n                return temp;\r\n            }\r\n        }\r\n    }\r\n</script>"]}]}