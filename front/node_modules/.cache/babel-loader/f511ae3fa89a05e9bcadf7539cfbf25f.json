{"remainingRequest":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\thread-loader\\dist\\cjs.js!C:\\WEB\\WLDD_hiveMQ\\node_modules\\babel-loader\\lib\\index.js!C:\\WEB\\WLDD_hiveMQ\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\WEB\\WLDD_hiveMQ\\src\\assets\\js\\Utils.js","dependencies":[{"path":"C:\\WEB\\WLDD_hiveMQ\\src\\assets\\js\\Utils.js","mtime":1562681675533},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es7.string.pad-start\";\n\nvar mqtt = require('mqtt'); //BaseURL of our microservice database\n\n\nexport var config = {\n  //Base link for local utilisation\n  //baseLink:'http://localhost:9090',\n  //baseLink:'http://192.168.0.101:9090',\n  //Base link for hosting\n  baseLink: 'http://wldd-mq-ws-bo-wldd.qlf.co.as8677.net/' //Function permitting to return actual date, used when receiving message\n\n};\nexport function returnDate() {\n  var today = new Date();\n  var ss = String(today.getSeconds()).padStart(2, '0');\n  var mm = String(today.getMinutes()).padStart(2, '0');\n  var hh = String(today.getHours()).padStart(2, '0');\n  var dd = String(today.getDate()).padStart(2, '0');\n  var MM = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n\n  var yyyy = today.getFullYear();\n  today = dd + '/' + MM + '/' + yyyy + '-' + hh + ':' + mm + ':' + ss;\n  return today;\n}\nexport function nbChar(chaine, lettre) {\n  return chaine.match(new RegExp(lettre, \"gi\")).length;\n}\nvar clientMqtt = null; //Permits to connect the user\n\nexport function connectMQTT(host, username, password, port, callback, errorCallback) {\n  var config = {\n    host: host,\n    username: username,\n    password: password,\n    port: port,\n    connectTimeout: 1000\n  };\n  clientMqtt = mqtt.connect(config);\n  clientMqtt.on('connect', function (e) {\n    callback();\n  });\n  clientMqtt.on('offline', function (e) {\n    errorCallback();\n  });\n} //Permits to get message\n\nexport function getMessage(callback) {\n  if (clientMqtt != null) {\n    clientMqtt.on('message', function (topic, message, options) {\n      // message is Buffer\n      callback(topic, message, options);\n    });\n  } else {\n    console.log('client null');\n  }\n} //Permits to publish a message on a topic\n\nexport function publishMQTT(topic, messageToSend, options) {\n  clientMqtt.publish(topic, messageToSend, options);\n}\nexport function subscribeMQTT(topicToSubscribe) {\n  clientMqtt.subscribe(topicToSubscribe, function (err) {\n    if (err) {\n      console.log('Error:' + err);\n    }\n  });\n}\nexport function unsubscribeMQTT(topicToUnSubscribe) {\n  clientMqtt.unsubscribe(topicToUnSubscribe, function (err) {\n    if (err) {\n      console.log('Error:' + err);\n    }\n  });\n} //Permits to associate a color for a string\n\nexport function stringToRGB(str) {\n  var hash = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  var colour = '#';\n\n  for (var i = 0; i < 3; i++) {\n    var value = hash >> i * 8 & 0xFF;\n    colour += ('00' + value.toString(16)).substr(-2);\n  }\n\n  return colour;\n} //Check if elements like token are not null\n\nexport function isNotNull(toCheck) {\n  if (toCheck != null && toCheck != \"\" && toCheck != \"undefined\" && toCheck != \"-1\") {\n    return true;\n  } else {\n    return false;\n  }\n}",{"version":3,"sources":["C:\\WEB\\WLDD_hiveMQ\\src\\assets\\js\\Utils.js"],"names":["mqtt","require","config","baseLink","returnDate","today","Date","ss","String","getSeconds","padStart","mm","getMinutes","hh","getHours","dd","getDate","MM","getMonth","yyyy","getFullYear","nbChar","chaine","lettre","match","RegExp","length","clientMqtt","connectMQTT","host","username","password","port","callback","errorCallback","connectTimeout","connect","on","e","getMessage","topic","message","options","console","log","publishMQTT","messageToSend","publish","subscribeMQTT","topicToSubscribe","subscribe","err","unsubscribeMQTT","topicToUnSubscribe","unsubscribe","stringToRGB","str","hash","i","charCodeAt","colour","value","toString","substr","isNotNull","toCheck"],"mappings":"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","sourcesContent":["var mqtt = require('mqtt');\r\n\r\n//BaseURL of our microservice database\r\nexport const config={\r\n    //Base link for local utilisation\r\n    //baseLink:'http://localhost:9090',\r\n\r\n    //baseLink:'http://192.168.0.101:9090',\r\n\r\n\r\n    //Base link for hosting\r\n    baseLink:'http://wldd-mq-ws-bo-wldd.qlf.co.as8677.net/',\r\n}\r\n\r\n//Function permitting to return actual date, used when receiving message\r\nexport function returnDate() {\r\n    var today = new Date();\r\n    var ss = String(today.getSeconds()).padStart(2, '0');\r\n    var mm = String(today.getMinutes()).padStart(2, '0');\r\n    var hh = String(today.getHours()).padStart(2, '0');\r\n    var dd = String(today.getDate()).padStart(2, '0');\r\n    var MM = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    var yyyy = today.getFullYear();\r\n\r\n    today = dd + '/' + MM + '/' + yyyy + '-' + hh + ':' + mm + ':' + ss;\r\n    return today;\r\n}\r\n\r\n\r\nexport function nbChar(chaine,lettre) {\r\n    return chaine.match(new RegExp(lettre,\"gi\")).length;\r\n}\r\n\r\nvar clientMqtt = null;\r\n\r\n//Permits to connect the user\r\nexport function connectMQTT(host,username,password,port,callback,errorCallback){\r\n    var config = {\r\n        host: host,\r\n        username: username,\r\n        password: password,\r\n        port: port,\r\n        connectTimeout: 1000\r\n    }\r\n\r\n    clientMqtt = mqtt.connect(config);\r\n\r\n    clientMqtt.on('connect',(e)=>{\r\n        callback();\r\n    })\r\n\r\n\r\n    clientMqtt.on('offline',(e)=>{\r\n        errorCallback();\r\n    })\r\n}\r\n\r\n//Permits to get message\r\nexport function getMessage(callback){\r\n    if(clientMqtt!=null)\r\n    {\r\n        clientMqtt.on('message', (topic, message, options) => {\r\n            // message is Buffer\r\n            callback(topic,message,options);\r\n        })\r\n    }\r\n    else{\r\n        console.log('client null');\r\n    }\r\n}\r\n\r\n//Permits to publish a message on a topic\r\nexport function publishMQTT(topic,messageToSend,options){\r\n    clientMqtt.publish(topic,messageToSend,options);\r\n}\r\n\r\nexport function subscribeMQTT(topicToSubscribe){\r\n    clientMqtt.subscribe(topicToSubscribe, function (err) {\r\n        if (err) {\r\n            console.log('Error:' + err);\r\n        }\r\n    })\r\n}\r\n\r\nexport function unsubscribeMQTT(topicToUnSubscribe){\r\n    clientMqtt.unsubscribe(topicToUnSubscribe, function (err) {\r\n        if (err) {\r\n            console.log('Error:' + err);\r\n        }\r\n    })\r\n}\r\n\r\n//Permits to associate a color for a string\r\nexport function stringToRGB(str){\r\n    var hash = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\r\n    }\r\n    var colour = '#';\r\n    for (var i = 0; i < 3; i++) {\r\n        var value = (hash >> (i * 8)) & 0xFF;\r\n        colour += ('00' + value.toString(16)).substr(-2);\r\n    }\r\n    return colour;\r\n}\r\n\r\n//Check if elements like token are not null\r\nexport function isNotNull(toCheck){\r\n    if(toCheck != null && toCheck != \"\" && toCheck != \"undefined\" && toCheck != \"-1\"){\r\n        return true;\r\n    }else{\r\n        return false;\r\n    }\r\n}\r\n"]}]}