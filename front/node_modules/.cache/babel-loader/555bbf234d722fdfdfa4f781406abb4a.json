{"remainingRequest":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\thread-loader\\dist\\cjs.js!C:\\WEB\\WLDD_hiveMQ\\node_modules\\babel-loader\\lib\\index.js!C:\\WEB\\WLDD_hiveMQ\\node_modules\\vuetify-loader\\lib\\loader.js!C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\WEB\\WLDD_hiveMQ\\src\\components\\Body.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\WEB\\WLDD_hiveMQ\\src\\components\\Body.vue","mtime":1560872384915},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ConnectionPopUp from \"./ConnectionPopUp\";\n\nvar utils = require('@/assets/js/Utils.js');\n\nimport { config } from '@/assets/js/Utils.js';\nimport axios from 'axios';\nimport Selector from \"./Selector.vue\";\nimport ActionPanel from \"./ActionPanel.vue\";\nimport PublishPanel from \"./PublishPanel.vue\";\nimport SubscribePanel from \"./SubscribePanel.vue\";\nimport AddingPanel from \"./AddingPanel.vue\";\nimport Inbox from \"./Inbox.vue\";\nexport default {\n  name: 'Body',\n  components: {\n    ConnectionPopUp: ConnectionPopUp,\n    Selector: Selector,\n    ActionPanel: ActionPanel,\n    PublishPanel: PublishPanel,\n    SubscribePanel: SubscribePanel,\n    AddingPanel: AddingPanel,\n    Inbox: Inbox\n  },\n  data: function data() {\n    return {\n      //Panels variables\n      publishPanel: null,\n      actionPanel: null,\n      //Publish Panel content\n      messageToSend: '',\n      topic: '',\n      //Connection variables\n      connection: true,\n      //Demonstrations\n      selected: null,\n      demonstrations: [],\n      userGroups: [],\n      selectedUserGroup: {\n        id: 1,\n        isSelected: false,\n        name: 'WLDD'\n      },\n      //Variables for Hashmaps\n      actualTopic: '',\n      actualMessage: '',\n      //Indexes\n      selectedDemoIndex: null,\n      selectedActionIndex: null,\n      //PopUps Variables\n      popUps: null,\n      deletePopUp: false,\n      editPopUp: false,\n      showBtn: 0,\n      //Variable for editing buttons\n      subscribedTopics: [],\n      //Tab who saves subscribed topics\n      oldValuesTab: [{\n        \"key\": \"{{test}}\",\n        \"value\": \"{{test}}\"\n      }] //Tab who saves last value used for a parameter\n\n    };\n  },\n  watch: {\n    selected: function selected() {\n      this.topic = '';\n      this.messageToSend = '';\n    }\n  },\n  //Permits to get all data when starting the website\n  mounted: function mounted() {\n    var _this = this;\n\n    axios.get(config.baseLink + '/user/findAll').then(function (responses) {\n      _this.userGroups = [];\n      _this.userGroups = responses.data;\n\n      for (var i = 0; i < _this.userGroups.length; i++) {\n        _this.userGroups[i].isSelected = false;\n      }\n    }, function (responses) {\n      console.log('erreur', responses);\n    });\n  },\n  methods: {\n    //Permits to import data from webservice database\n    update: function update() {\n      var _this2 = this;\n\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      axios.get(config.baseLink + '/demo/findByUserGroupId?userGroupId=' + this.selectedUserGroup.id).then(function (responses) {\n        _this2.demonstrations = [];\n        _this2.demonstrations = responses.data;\n\n        for (var j = 0; j < _this2.demonstrations.length; j++) {\n          for (var i = 0; i < _this2.demonstrations[j].action.length; i++) {\n            _this2.demonstrations[j].action[i].demo = _this2.selected;\n            _this2.demonstrations[j].action[i].isSelected = false;\n            _this2.demonstrations[j].action[i].topicSubscribe = _this2.demonstrations[j].action[i].topic;\n            _this2.demonstrations[j].action[i].topicOriginal = _this2.demonstrations[j].action[i].topic;\n            _this2.demonstrations[j].action[i].messageOriginal = _this2.demonstrations[j].action[i].message;\n            _this2.demonstrations[j].action[i].messageOriginal = _this2.demonstrations[j].action[i].message;\n          }\n        }\n\n        if (_this2.selected != null) {\n          _this2.selected = _this2.demonstrations.filter(function (demonstration) {\n            return demonstration.id == _this2.selected.id;\n          })[0];\n        }\n\n        if (callback != null) {\n          callback();\n        }\n      }, function (response) {\n        console.log('erreur', response);\n      });\n    },\n    //Permits to fill the publish panel when we select an action\n    assignTopic: function assignTopic(action) {\n      this.topic = action.topic;\n      this.actualTopic = action.topicOriginal;\n      this.messageToSend = action.message;\n      this.actualMessage = action.messageOriginal;\n      this.publishPanel = 0;\n      this.selectedActionIndex = this.demonstrations[this.selectedDemoIndex].action.indexOf(action);\n      this.popUps = 1;\n      this.showBtn = 1;\n    }\n  }\n};",{"version":3,"sources":["Body.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div>\r\n        <v-layout>\r\n            <v-flex d-flex md11>\r\n                <!--Drop down menu to select the demonstration-->\r\n                <Selector  :demonstrations=\"demonstrations\"\r\n                           @actionPanel=\"actionPanel=$event\"\r\n                           @selected=\"selected=$event\"\r\n                           @selectedDemoIndex=\"selectedDemoIndex=$event\"\r\n                           @selectedActionIndex=\"selectedActionIndex=$event\"\r\n                           :editPopUp=\"editPopUp\"\r\n                           @editPopUp=\"editPopUp=$event\"\r\n                           :deletePopUp=\"deletePopUp\"\r\n                           @deletePopUp=\"deletePopUp=$event\"\r\n                           :selectedActionIndex=\"selectedActionIndex\"\r\n                           :showBtn=\"showBtn\"\r\n                           @showBtn=\"showBtn=$event\"\r\n                           :actionPanel=\"actionPanel\"\r\n                           :userGroups=\"userGroups\"></Selector>\r\n\r\n                <!--Action buttons related to the demonstration choosed by the user-->\r\n                <ActionPanel :selected=\"selected\"\r\n                             :actionPanel=\"actionPanel\"\r\n                             :deletePopUp=\"deletePopUp\"\r\n                             @deletePopUp=\"deletePopUp=$event\"\r\n                             :editPopUp=\"editPopUp\"\r\n                             @editPopUp=\"editPopUp=$event\"\r\n                             :demonstrations=\"demonstrations\"\r\n                             :selectedActionIndex=\"selectedActionIndex\"\r\n                             :selectedDemoIndex=\"selectedDemoIndex\"\r\n                             @actionPanel=\"actionPanel=$event\"\r\n                             @selectedActionIndex=\"selectedActionIndex=$event\"></ActionPanel>\r\n            </v-flex>\r\n        </v-layout>\r\n\r\n        <v-flex d-flex md10 offset-md1>\r\n            <!--Publish panel permitting to send a message to a certain topic-->\r\n            <!--PopUp permitting to change parameters to the message to send-->\r\n            <!--PopUp permitting to change parameters to the topic where we want to publish-->\r\n            <v-flex md7>\r\n                <PublishPanel :publishPanel=\"publishPanel\"\r\n                              :topic=\"topic\"\r\n                              :messageToSend=\"messageToSend\"\r\n                              @topic=\"topic=$event\"\r\n                              @messageToSend=\"messageToSend=$event\"\r\n                              :actualTopic=\"actualTopic\"\r\n                              :actualMessage=\"actualMessage\"\r\n                              :demonstrations=\"demonstrations\"\r\n                              :selectedActionIndex=\"selectedActionIndex\"\r\n                              :selectedDemoIndex=\"selectedDemoIndex\"\r\n                              :popUps=\"popUps\"\r\n                              @popUps=\"popUps=$event\"\r\n                              @oldValuesTab=\"oldValuesTab=$event\"\r\n                              :oldValuesTab=\"oldValuesTab\"></PublishPanel>\r\n            </v-flex>\r\n\r\n            <v-flex md4 offset-md1>\r\n                <!--Subscribe panel permitting to subscribe to certain topics and receive message from them-->\r\n                <SubscribePanel :selectedDemoIndex=\"selectedDemoIndex\"\r\n                                :demonstrations=\"demonstrations\"\r\n                                :subscribedTopics=\"subscribedTopics\"\r\n                                @subscribedTopics=\"subscribedTopics=$event\"\r\n                                @oldValuesTab=\"oldValuesTab=$event\"\r\n                                :oldValuesTab=\"oldValuesTab\"></SubscribePanel>\r\n            </v-flex>\r\n        </v-flex>\r\n\r\n        </br></br>\r\n        <!--Panels who permits to add a new action or demonstration-->\r\n        <AddingPanel :selected=\"selected\"\r\n                     :userGroups=\"userGroups\"\r\n                     :demonstrations=\"demonstrations\"\r\n                     :selectedActionIndex=\"selectedActionIndex\"\r\n                     :selectedDemoIndex=\"selectedDemoIndex\"></AddingPanel>\r\n\r\n        </br></br>\r\n\r\n        <!--Inbox who shows message received on the topics that the user has subscribed-->\r\n        <Inbox v-if=\"!this.connection\"\r\n               :subscribedTopics=\"subscribedTopics\"\r\n               @subscribedTopics=\"subscribedTopics\"></Inbox>\r\n\r\n        <!--Connection PopUp-->\r\n        <ConnectionPopUp :connection=\"connection\"\r\n                         @connection=\"connection=$event\"\r\n                         :userGroups=\"userGroups\"\r\n                         @selectedUserGroup=\"selectedUserGroup=$event\"></ConnectionPopUp>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import ConnectionPopUp from \"./ConnectionPopUp\";\r\n    var utils= require('@/assets/js/Utils.js');\r\n    import {config} from '@/assets/js/Utils.js';\r\n    import axios from 'axios';\r\n    import Selector from './Selector.vue'\r\n    import ActionPanel from './ActionPanel.vue'\r\n    import PublishPanel from './PublishPanel.vue'\r\n    import SubscribePanel from './SubscribePanel.vue'\r\n    import AddingPanel from './AddingPanel.vue'\r\n    import Inbox from './Inbox.vue'\r\n\r\n    export default {\r\n        name: 'Body',\r\n        components:{\r\n            ConnectionPopUp,\r\n            Selector,\r\n            ActionPanel,\r\n            PublishPanel,\r\n            SubscribePanel,\r\n            AddingPanel,\r\n            Inbox\r\n        },\r\n        data: function () {\r\n\r\n            return {\r\n                //Panels variables\r\n                publishPanel: null,\r\n                actionPanel: null,\r\n\r\n                //Publish Panel content\r\n                messageToSend: '',\r\n                topic: '',\r\n\r\n                //Connection variables\r\n                connection: true,\r\n\r\n                //Demonstrations\r\n                selected: null,\r\n                demonstrations:[],\r\n                userGroups:[],\r\n                selectedUserGroup : {\r\n                    id:1,\r\n                    isSelected:false,\r\n                    name:'WLDD',\r\n                },\r\n\r\n                //Variables for Hashmaps\r\n                actualTopic : '',\r\n                actualMessage : '',\r\n\r\n                //Indexes\r\n                selectedDemoIndex : null,\r\n                selectedActionIndex : null,\r\n\r\n                //PopUps Variables\r\n                popUps : null,\r\n                deletePopUp:false,\r\n                editPopUp:false,\r\n\r\n                showBtn : 0,    //Variable for editing buttons\r\n\r\n                subscribedTopics : [],  //Tab who saves subscribed topics\r\n                oldValuesTab : [{\"key\":\"{{test}}\",\"value\":\"{{test}}\"}],  //Tab who saves last value used for a parameter\r\n            }\r\n        },\r\n\r\n        watch:{\r\n          selected:function(){\r\n              this.topic = '';\r\n              this.messageToSend = '';\r\n          }\r\n        },\r\n\r\n        //Permits to get all data when starting the website\r\n    mounted(){\r\n        axios\r\n            .get(config.baseLink+'/user/findAll')\r\n            .then((responses) =>{\r\n                this.userGroups = [];\r\n                this.userGroups = responses.data;\r\n                for(var i = 0; i<this.userGroups.length;i++)\r\n                {\r\n                    this.userGroups[i].isSelected=false;\r\n                }\r\n            }, (responses) =>{\r\n                console.log('erreur',responses);\r\n            })\r\n    },\r\n        methods: {\r\n            //Permits to import data from webservice database\r\n            update(callback=null){\r\n                axios\r\n                    .get(config.baseLink+'/demo/findByUserGroupId?userGroupId='+this.selectedUserGroup.id)\r\n                    .then((responses) =>{\r\n                        this.demonstrations = [];\r\n                        this.demonstrations=responses.data;\r\n                        for(var j=0;j<this.demonstrations.length;j++)\r\n                        {\r\n                            for(var i=0;i<this.demonstrations[j].action.length;i++)\r\n                            {\r\n                                this.demonstrations[j].action[i].demo=this.selected;\r\n                                this.demonstrations[j].action[i].isSelected=false;\r\n                                this.demonstrations[j].action[i].topicSubscribe=this.demonstrations[j].action[i].topic;\r\n                                this.demonstrations[j].action[i].topicOriginal=this.demonstrations[j].action[i].topic;\r\n                                this.demonstrations[j].action[i].messageOriginal=this.demonstrations[j].action[i].message;\r\n                                this.demonstrations[j].action[i].messageOriginal=this.demonstrations[j].action[i].message;\r\n                            }\r\n                        }\r\n                        if(this.selected!=null)\r\n                        {\r\n                            this.selected = this.demonstrations.filter(demonstration => demonstration.id == this.selected.id)[0];\r\n                        }\r\n                        if(callback!=null){\r\n                            callback();\r\n                        }\r\n                    }, (response)=>{\r\n                    console.log('erreur',response)\r\n                })\r\n            },\r\n\r\n            //Permits to fill the publish panel when we select an action\r\n            assignTopic(action) {\r\n                this.topic = action.topic;\r\n                this.actualTopic = action.topicOriginal;\r\n                this.messageToSend = action.message;\r\n                this.actualMessage = action.messageOriginal;\r\n                this.publishPanel = 0;\r\n                this.selectedActionIndex = this.demonstrations[this.selectedDemoIndex].action.indexOf(action);\r\n                this.popUps = 1;\r\n                this.showBtn = 1;\r\n\r\n            }\r\n        },\r\n    }\r\n</script>\r\n\r\n"],"sourceRoot":"src/components"}]}