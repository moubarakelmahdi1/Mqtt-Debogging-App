{"remainingRequest":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\thread-loader\\dist\\cjs.js!C:\\WEB\\WLDD_hiveMQ\\node_modules\\babel-loader\\lib\\index.js!C:\\WEB\\WLDD_hiveMQ\\node_modules\\vuetify-loader\\lib\\loader.js!C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\WEB\\WLDD_hiveMQ\\src\\components\\PublishPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\WEB\\WLDD_hiveMQ\\src\\components\\PublishPanel.vue","mtime":1561112696364},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar matchAll = require(\"match-all\");\n\nimport { publishMQTT } from '@/assets/js/Utils.js';\n\nvar HashMap = require('hashmap');\n\nexport default {\n  name: 'PublishPanel',\n  props: {\n    'publishPanel': Number,\n    'topic': String,\n    'messageToSend': String,\n    'actualTopic': String,\n    'actualMessage': String,\n    'demonstrations': Array,\n    'selectedActionIndex': Number,\n    'selectedDemoIndex': Number,\n    'popUps': Number,\n    'oldValuesTab': Array\n  },\n  data: function data() {\n    return {\n      showPublishPanel: this.publishPanel,\n      publishTopic: this.topic,\n      message: this.messageToSend,\n      popUpMessage: 0,\n      popUpTopic: 0,\n      parametersMap: new HashMap(),\n      originalTopic: this.actualTopic,\n      originalMessage: this.actualMessage,\n      defaultMap: new HashMap(),\n      content: '',\n      showPopUps: this.popUps,\n      oldValues: [{\n        \"key\": \"{{test}}\",\n        \"value\": \"{{test}}\"\n      }],\n      retain: false,\n      retainChoice: [true, false]\n    };\n  },\n  watch: {\n    publishTopic: function publishTopic() {\n      this.$emit('topic', this.publishTopic);\n    },\n    topic: function topic() {\n      this.publishTopic = this.topic;\n    },\n    message: function message() {\n      this.$emit('messageToSend', this.message);\n    },\n    messageToSend: function messageToSend() {\n      this.message = this.messageToSend;\n    },\n    actualTopic: function actualTopic() {\n      this.originalTopic = this.actualTopic;\n    },\n    actualMessage: function actualMessage() {\n      this.originalMessage = this.actualMessage;\n    },\n    publishPanel: function publishPanel() {\n      this.showPublishPanel = this.publishPanel;\n    },\n    popUps: function popUps() {\n      this.showPopUps = this.popUps;\n    },\n    showPopUps: function showPopUps() {\n      this.$emit('popUps', this.showPopUps);\n\n      if (this.showPopUps) {\n        this.showPopUp('topic');\n      }\n    },\n    oldValues: function oldValues() {\n      this.$emit('oldValuesTab', this.oldValues);\n    },\n    oldValuesTab: function oldValuesTab() {\n      this.oldValues = this.oldValuesTab;\n    }\n  },\n  methods: {\n    publish: function publish() {\n      if (this.publishTopic.length > 0) {\n        var self = this;\n        var options = {\n          retain: self.retain\n        };\n        publishMQTT(this.publishTopic, this.message, options);\n      } else {\n        alert('Fill topic where to publish!');\n      }\n    },\n    //Permits to show parameters popUp for the topic and the message we choosed\n    showPopUp: function showPopUp(type) {\n      var regex = /{{([a-zA-Z0-9]*)}}/gm;\n      var matches;\n\n      if (type == 'topic') {\n        matches = matchAll(this.originalTopic, regex).toArray();\n      } else if (type == 'message') {\n        matches = matchAll(this.originalMessage, regex).toArray();\n      }\n\n      for (var i = 0; i < matches.length; i++) {\n        this.parametersMap.set('{{' + matches[i] + '}}', '{{' + matches[i] + '}}');\n\n        if (type == 'topic') {\n          this.defaultMap.set('{{' + matches[i] + '}}', this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].parametersTopics.filter(function (element) {\n            return element.parameter == '{{' + matches[i] + '}}';\n          })[0].parameterDefaultValue);\n        } else if (type == 'message') {\n          this.defaultMap.set('{{' + matches[i] + '}}', this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].parametersMessages.filter(function (element) {\n            return element.parameter == '{{' + matches[i] + '}}';\n          })[0].parameterDefaultValue);\n        }\n      }\n\n      if (this.parametersMap.size > 0) {\n        if (type == 'topic') {\n          this.publishTopic = this.originalTopic;\n          this.popUpTopic = 1;\n        } else if (type == 'message') {\n          this.message = this.originalMessage;\n          this.popUpMessage = 1;\n        }\n      } else {\n        if (type == 'topic') {\n          this.showPopUp('message');\n          this.showPopUps = 0;\n        }\n      }\n    },\n    //Permits to replace parameters\n    replaceText: function replaceText(type) {\n      for (var i = 0; i < this.parametersMap.size; i++) {\n        if (type == 'topic') {\n          this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].topic = this.publishTopic.replace(this.parametersMap.keys()[i], this.parametersMap.values()[i]);\n          this.publishTopic = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].topic;\n        } else if (type == 'message') {\n          this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].message = this.message.replace(this.parametersMap.keys()[i], this.parametersMap.values()[i]);\n          this.message = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].message;\n        }\n\n        var temp = new Object();\n        var res = 1;\n        temp.key = this.parametersMap.keys()[i];\n        temp.value = this.parametersMap.values()[i];\n\n        for (var j = 0; j < this.oldValues.length; j++) {\n          if (this.oldValues[i].key == temp.key) {\n            this.oldValues[i].value = this.parametersMap.values()[i];\n            res = 0;\n          }\n        }\n\n        if (res) {\n          this.oldValues.push(temp);\n        }\n      }\n\n      this.closePopUp();\n\n      if (type == 'topic') {\n        this.showPopUp('message');\n      }\n    },\n    setDefaultValue: function setDefaultValue(type, index) {\n      this.parametersMap.set(this.parametersMap.keys()[index - 1], this.defaultMap.values()[index - 1]);\n\n      if (type == 'topic') {\n        this.$refs.parameterContentTopic[index - 1].value = this.defaultMap.values()[index - 1];\n      } else if (type == 'message') {\n        this.$refs.parameterContentMessage[index - 1].value = this.defaultMap.values()[index - 1];\n      }\n    },\n    setValue: function setValue(type, index, $event) {\n      this.parametersMap.set(this.parametersMap.keys()[index - 1], $event);\n\n      if (type == 'topic') {\n        this.$refs.parameterContentTopic[index - 1].value = $event;\n      } else if (type == 'message') {\n        this.$refs.parameterContentMessage[index - 1].value = $event;\n      }\n    },\n    closePopUp: function closePopUp(type) {\n      this.parametersMap = new HashMap();\n      this.defaultMap = new HashMap();\n      this.popUpMessage = 0;\n      this.popUpTopic = 0;\n      this.showPopUps = 0;\n\n      if (type == 'topic') {\n        this.showPopUp('message');\n      }\n    },\n    setOldValue: function setOldValue(type, index) {\n      var temp = this.findOldValue(index);\n      this.parametersMap.set(this.parametersMap.keys()[index - 1], temp);\n\n      if (type == 'topic') {\n        this.$refs.parameterContentTopic[index - 1].value = temp;\n      } else if (type == 'message') {\n        this.$refs.parameterContentMessage[index - 1].value = temp;\n      }\n    },\n    findOldValue: function findOldValue(index) {\n      var temp = '';\n\n      for (var i = 0; i < this.oldValues.length; i++) {\n        if (this.oldValues[i].key == this.parametersMap.keys()[index - 1]) {\n          temp = this.oldValues[i].value;\n          this.parametersMap.set(this.oldValues[i].key, temp);\n        }\n      }\n\n      return temp;\n    }\n  }\n};",{"version":3,"sources":["PublishPanel.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <v-flex>\r\n        <!--Publish panel permitting to send a message to a certain topic-->\r\n        <v-flex>\r\n            <v-expansion-panel v-model=\"showPublishPanel\">\r\n                <v-expansion-panel-content>\r\n                    <template v-slot:header>\r\n                        <div class=\"strongTexts\">Publish</div>\r\n                    </template>\r\n\r\n                    <v-form @submit.prevent>\r\n                        <v-layout>\r\n                            <v-flex md10 offset-md1 offset-xs1>\r\n\r\n                                </br>\r\n\r\n                                <v-text-field\r\n                                        v-model=\"publishTopic\"\r\n                                        label=\"Topic\"\r\n                                        box>\r\n                                </v-text-field>\r\n\r\n                                </br>\r\n\r\n                                <v-textarea\r\n                                        v-model=\"message\"\r\n                                        label=\"Message\"\r\n                                        box\r\n                                ></v-textarea>\r\n                            </v-flex>\r\n                        </v-layout>\r\n\r\n                        <!--<v-flex d-flex>\r\n                            <v-flex md2 offset-md5>\r\n                                <v-select\r\n\r\n                                        v-model=\"retain\"\r\n                                        :items=\"retainChoice\"\r\n                                        label=\"Retained\">\r\n\r\n                                </v-select>\r\n                            </v-flex>\r\n                        </v-flex>-->\r\n\r\n\r\n                        <!--Publish button who send the message to the topic choosed by the user-->\r\n                        <v-flex>\r\n                            <v-btn  type=\"submit\"\r\n                                    class=\"addButton\"\r\n                                   color=rgba(0,103,160,1)\r\n                                   @click=\"publish()\">\r\n                                <div class=\"button\">Publish</div>\r\n                            </v-btn>\r\n                        </v-flex>\r\n                    </v-form>\r\n                </v-expansion-panel-content>\r\n            </v-expansion-panel>\r\n        </v-flex>\r\n\r\n        <!--PopUp permitting to change parameters to the message to send-->\r\n        <v-dialog\r\n                v-model=\"popUpMessage\"\r\n                width=\"500\"\r\n                persistent=\"\">\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    Fill parameters for Message\r\n                </v-card-title>\r\n\r\n                </br>\r\n\r\n                <v-form @submit.prevent>\r\n                    <v-flex d-flex\r\n                            v-for=\"index in parametersMap.size\">\r\n                        <v-flex md3 offset-md1 offset-xs1>\r\n                            <div class=\"parameters\">\r\n                                {{parametersMap.keys()[index-1]}}\r\n                            </div>\r\n                        </v-flex>\r\n                        <v-flex md8 d-flex>\r\n                            <v-text-field\r\n                                    ref=\"parameterContentMessage\"\r\n                                    @change=\"setValue('message',index,$event)\"\r\n                                    :value=\"findOldValue(index)\"\r\n                                    solo>\r\n                            </v-text-field>\r\n                            <div class=\"defaultValuebutton\">\r\n                                <v-tooltip top>\r\n                                    <template v-slot:activator=\"{ on }\">\r\n                                        <v-btn fab small @click=\"setDefaultValue('message',index)\" v-on=\"on\">\r\n                                            <v-icon dark>build</v-icon>\r\n                                        </v-btn>\r\n                                    </template>\r\n                                    <span>{{defaultMap.values()[index-1]}}</span>\r\n                                </v-tooltip>\r\n                                <v-btn fab small v-if=\"findOldValue(index)!=''\" @click=\"setOldValue('message',index)\">\r\n                                    <v-icon dark>backup</v-icon>\r\n                                </v-btn>\r\n                            </div>\r\n                        </v-flex>\r\n                    </v-flex>\r\n\r\n                    <v-card-actions>\r\n                        <v-btn\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"closePopUp('message')\">\r\n                            Cancel\r\n                        </v-btn>\r\n\r\n                        <v-spacer></v-spacer>\r\n\r\n                        <v-btn  type=\"submit\"\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"replaceText('message')\">\r\n                            Apply\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </v-form>\r\n\r\n            </v-card>\r\n        </v-dialog>\r\n\r\n        <!--PopUp permitting to change parameters to the topic where we want to publish-->\r\n        <v-dialog\r\n                v-model=\"popUpTopic\"\r\n                width=\"500\"\r\n                persistent=\"\">\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    Fill parameters for Topic\r\n                </v-card-title>\r\n\r\n                </br>\r\n\r\n                <v-form @submit.prevent>\r\n                    <v-flex d-flex\r\n                            v-for=\"index in parametersMap.size\">\r\n                        <v-flex md3 offset-md1 offset-xs1>\r\n                            <div class=\"parameters\">\r\n                                {{parametersMap.keys()[index-1]}}\r\n                            </div>\r\n                        </v-flex>\r\n                        <v-flex md8 d-flex>\r\n                            <v-text-field\r\n                                    ref=\"parameterContentTopic\"\r\n                                    @change=\"setValue('topic',index,$event)\"\r\n                                    :value=\"findOldValue(index)\"\r\n                                    solo>\r\n                            </v-text-field>\r\n                            <div class=\"defaultValuebutton\">\r\n                                <v-tooltip top>\r\n                                    <template v-slot:activator=\"{ on }\">\r\n                                        <v-btn fab small @click=\"setDefaultValue('topic',index)\" v-on=\"on\">\r\n                                            <v-icon dark>build</v-icon>\r\n                                        </v-btn>\r\n                                    </template>\r\n                                    <span>{{defaultMap.values()[index-1]}}</span>\r\n                                </v-tooltip>\r\n                                <v-btn fab small v-if=\"findOldValue(index)!=''\" @click=\"setOldValue('topic',index)\">\r\n                                    <v-icon dark>backup</v-icon>\r\n                                </v-btn>\r\n                            </div>\r\n                        </v-flex>\r\n                    </v-flex>\r\n\r\n                    <v-card-actions>\r\n                        <v-btn\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"closePopUp('topic')\">\r\n                            Cancel\r\n                        </v-btn>\r\n\r\n                        <v-spacer></v-spacer>\r\n\r\n                        <v-btn  type=\"submit\"\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"replaceText('topic')\">\r\n                            Apply\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </v-form>\r\n            </v-card>\r\n        </v-dialog>\r\n    </v-flex>\r\n</template>\r\n\r\n<script>\r\n    const matchAll = require(\"match-all\");\r\n    import {publishMQTT} from '@/assets/js/Utils.js';\r\n    var HashMap = require('hashmap');\r\n    export default {\r\n        name: 'PublishPanel',\r\n        props: {\r\n            'publishPanel': Number,\r\n            'topic': String,\r\n            'messageToSend': String,\r\n            'actualTopic': String,\r\n            'actualMessage': String,\r\n            'demonstrations': Array,\r\n            'selectedActionIndex': Number,\r\n            'selectedDemoIndex': Number,\r\n            'popUps' : Number,\r\n            'oldValuesTab' : Array\r\n        },\r\n        data: function () {\r\n            return {\r\n                showPublishPanel: this.publishPanel,\r\n                publishTopic: this.topic,\r\n                message: this.messageToSend,\r\n                popUpMessage: 0,\r\n                popUpTopic: 0,\r\n                parametersMap: new HashMap(),\r\n                originalTopic: this.actualTopic,\r\n                originalMessage: this.actualMessage,\r\n                defaultMap: new HashMap(),\r\n                content:'',\r\n                showPopUps : this.popUps,\r\n                oldValues : [{\"key\":\"{{test}}\",\"value\":\"{{test}}\"}],\r\n                retain: false,\r\n                retainChoice:[true,false]\r\n            }\r\n        },\r\n        watch: {\r\n            publishTopic: function () {\r\n                this.$emit('topic', this.publishTopic);\r\n            },\r\n            topic: function () {\r\n                this.publishTopic = this.topic;\r\n            },\r\n            message: function () {\r\n                this.$emit('messageToSend', this.message);\r\n            },\r\n            messageToSend: function () {\r\n                this.message = this.messageToSend;\r\n            },\r\n            actualTopic: function () {\r\n                this.originalTopic = this.actualTopic;\r\n            },\r\n            actualMessage: function () {\r\n                this.originalMessage = this.actualMessage;\r\n            },\r\n            publishPanel: function () {\r\n                this.showPublishPanel = this.publishPanel;\r\n            },\r\n            popUps:function(){\r\n                this.showPopUps = this.popUps;\r\n            },\r\n            showPopUps:function(){\r\n                this.$emit('popUps', this.showPopUps);\r\n                if(this.showPopUps){\r\n                    this.showPopUp('topic');\r\n                }\r\n            },\r\n            oldValues:function(){\r\n                this.$emit('oldValuesTab',this.oldValues);\r\n            },\r\n            oldValuesTab:function(){\r\n                this.oldValues = this.oldValuesTab;\r\n            }\r\n        },\r\n        methods: {\r\n            publish() {\r\n                if(this.publishTopic.length>0)\r\n                {\r\n                    var self = this;\r\n                    var options = {\r\n                        retain : self.retain,\r\n                    };\r\n                    publishMQTT(this.publishTopic, this.message , options);\r\n                }\r\n                else{\r\n                    alert('Fill topic where to publish!');\r\n                }\r\n            },\r\n            //Permits to show parameters popUp for the topic and the message we choosed\r\n            showPopUp(type) {\r\n                const regex = /{{([a-zA-Z0-9]*)}}/gm;\r\n                let matches;\r\n                if (type == 'topic') {\r\n                    matches = matchAll(this.originalTopic, regex).toArray();\r\n                } else if (type == 'message') {\r\n                    matches = matchAll(this.originalMessage, regex).toArray();\r\n                }\r\n                for (var i=0; i < matches.length; i++) {\r\n                    this.parametersMap.set('{{'+matches[i]+'}}', '{{'+matches[i]+'}}');\r\n                    if(type=='topic')\r\n                    {\r\n                        this.defaultMap.set('{{'+matches[i]+'}}', this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].parametersTopics.filter(element => element.parameter == '{{'+matches[i]+'}}')[0].parameterDefaultValue);\r\n                    }\r\n                    else if(type=='message'){\r\n                        this.defaultMap.set('{{'+matches[i]+'}}', this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].parametersMessages.filter(element => element.parameter =='{{'+matches[i]+'}}')[0].parameterDefaultValue);\r\n                    }\r\n                }\r\n                if (this.parametersMap.size > 0) {\r\n                    if (type == 'topic') {\r\n                        this.publishTopic = this.originalTopic;\r\n                        this.popUpTopic = 1;\r\n                    } else if (type == 'message') {\r\n                        this.message = this.originalMessage;\r\n                        this.popUpMessage = 1;\r\n                    }\r\n                }\r\n                else{\r\n                    if(type=='topic'){\r\n                        this.showPopUp('message');\r\n                        this.showPopUps=0;\r\n                    }\r\n\r\n                }\r\n            },\r\n            //Permits to replace parameters\r\n            replaceText(type) {\r\n                for (var i = 0; i < this.parametersMap.size; i++) {\r\n                    if (type == 'topic') {\r\n                        this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].topic = this.publishTopic.replace(this.parametersMap.keys()[i], this.parametersMap.values()[i]);\r\n                        this.publishTopic = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].topic;\r\n                    } else if (type == 'message') {\r\n                        this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].message = this.message.replace(this.parametersMap.keys()[i], this.parametersMap.values()[i]);\r\n                        this.message = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].message;\r\n                    }\r\n                    var temp = new Object();\r\n                    var res=1;\r\n                    temp.key = this.parametersMap.keys()[i];\r\n                    temp.value = this.parametersMap.values()[i];\r\n                    for(var j=0;j<this.oldValues.length;j++){\r\n                        if(this.oldValues[i].key==temp.key){\r\n                            this.oldValues[i].value = this.parametersMap.values()[i];\r\n                            res=0;\r\n                        }\r\n                    }\r\n                    if(res){\r\n                        this.oldValues.push(temp);\r\n                    }\r\n                }\r\n                this.closePopUp();\r\n                if(type=='topic'){\r\n                    this.showPopUp('message');\r\n                }\r\n            },\r\n            setDefaultValue(type,index) {\r\n                this.parametersMap.set(this.parametersMap.keys()[index-1], this.defaultMap.values()[index-1]);\r\n                if(type=='topic'){\r\n                    this.$refs.parameterContentTopic[index-1].value=this.defaultMap.values()[index-1];\r\n                }\r\n                else if(type=='message')\r\n                {\r\n                    this.$refs.parameterContentMessage[index-1].value=this.defaultMap.values()[index-1];\r\n                }\r\n            },\r\n            setValue(type,index,$event){\r\n                this.parametersMap.set(this.parametersMap.keys()[index-1],$event);\r\n                if(type=='topic'){\r\n                    this.$refs.parameterContentTopic[index-1].value=$event;\r\n                }\r\n                else if(type=='message')\r\n                {\r\n                    this.$refs.parameterContentMessage[index-1].value=$event;\r\n                }\r\n            },\r\n            closePopUp(type){\r\n                this.parametersMap = new HashMap();\r\n                this.defaultMap = new HashMap();\r\n                this.popUpMessage = 0;\r\n                this.popUpTopic = 0;\r\n                this.showPopUps=0;\r\n                if(type=='topic'){\r\n                    this.showPopUp('message');\r\n                }\r\n            },\r\n            setOldValue(type,index) {\r\n                var temp=this.findOldValue(index);\r\n                this.parametersMap.set(this.parametersMap.keys()[index-1],temp );\r\n                if(type=='topic'){\r\n                    this.$refs.parameterContentTopic[index-1].value=temp;\r\n                }\r\n                else if(type=='message')\r\n                {\r\n                    this.$refs.parameterContentMessage[index-1].value=temp;\r\n                }\r\n            },\r\n            findOldValue(index){\r\n                var temp='';\r\n                for(var i=0;i<this.oldValues.length;i++){\r\n                    if(this.oldValues[i].key==this.parametersMap.keys()[index-1]){\r\n                        temp = this.oldValues[i].value;\r\n                        this.parametersMap.set(this.oldValues[i].key,temp);\r\n                    }\r\n                }\r\n                return temp;\r\n            }\r\n        }\r\n    }\r\n</script>"],"sourceRoot":"src/components"}]}