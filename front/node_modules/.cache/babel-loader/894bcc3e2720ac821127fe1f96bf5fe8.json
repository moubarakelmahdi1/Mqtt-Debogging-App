{"remainingRequest":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\babel-loader\\lib\\index.js!C:\\WEB\\WLDD_hiveMQ\\node_modules\\vuetify-loader\\lib\\loader.js!C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\WEB\\WLDD_hiveMQ\\src\\components\\ActionPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\WEB\\WLDD_hiveMQ\\src\\components\\ActionPanel.vue","mtime":1562681612080},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WEB\\WLDD_hiveMQ\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { config } from '@/assets/js/Utils.js';\nimport axios from 'axios';\n\nvar HashMap = require('hashmap');\n\nexport default {\n  name: 'ActionPanel',\n  props: {\n    'actionPanel': Number,\n    'selected': Object,\n    'deletePopUp': Boolean,\n    'editPopUp': Boolean,\n    'demonstrations': Array,\n    'selectedActionIndex': Number,\n    'selectedDemoIndex': Number\n  },\n  data: function data() {\n    return {\n      showActionPanel: this.actionPanel,\n      deleteModal: this.deletePopUp,\n      actionName: null,\n      actionId: null,\n      editModal: this.editPopUp,\n      newActionName: '',\n      newActionTopic: '',\n      newActionMessage: '',\n      parametersMap: new HashMap(),\n      //Hashmap with all the parameters\n      parametersIds: new HashMap(),\n      //Hashmap with parameters Id's\n      popUpMessage: 0,\n      //popUp for filling message parameters of the action that wa are editing\n      popUpTopic: 0,\n      //popUp for filling topic parameters of the action that wa are editing\n      newDefaultValues: [],\n      //new default values of the action that we are editing\n      actionIndex: this.selectedActionIndex,\n      //index of the selected action\n      tempParameters: [],\n      //copy of default values for the action that we want to edit\n      importConfirmation: 0\n    };\n  },\n  watch: {\n    actionPanel: function actionPanel() {\n      this.showActionPanel = this.actionPanel;\n    },\n    selected: function selected() {\n      this.showActionPanel = 0;\n    },\n    deletePopUp: function deletePopUp() {\n      this.deleteModal = this.deletePopUp;\n    },\n    deleteModal: function deleteModal() {\n      this.$emit('deletePopUp', this.deleteModal);\n    },\n    editPopUp: function editPopUp() {\n      this.editModal = this.editPopUp;\n\n      if (this.editModal == true) {\n        this.newActionName = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].name;\n        this.newActionTopic = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].topicOriginal;\n        this.newActionMessage = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].messageOriginal;\n      }\n    },\n    editModal: function editModal() {\n      this.$emit('editPopUp', this.editModal);\n    },\n    showActionPanel: function showActionPanel() {\n      this.$emit('actionPanel', this.showActionPanel);\n    },\n    selectedActionIndex: function selectedActionIndex() {\n      this.actionIndex = this.selectedActionIndex;\n    },\n    actionIndex: function actionIndex() {\n      this.$emit('selectedActionIndex', this.actionIndex);\n    }\n  },\n  methods: {\n    //permits to select an action\n    assignTopic: function assignTopic(action) {\n      this.actionName = action.name;\n      this.actionId = action.id;\n      this.$parent.assignTopic(action);\n      this.newActionName = action.name;\n      this.newActionTopic = action.topic;\n      this.newActionMessage = action.message;\n    },\n    //permits to delete an action\n    deleteAction: function deleteAction() {\n      var _this = this;\n\n      axios.post(config.baseLink + '/action/deleteAction?actionId=' + this.actionId).then(function (responses) {\n        _this.$parent.update();\n\n        _this.deleteModal = false;\n        _this.newActionName = '';\n        _this.newActionMessage = '';\n        _this.newActionTopic = '';\n        _this.actionIndex = null;\n      }, function (response) {\n        console.log('erreur', response);\n      });\n    },\n    //Permits to Add a new action for a demonstration\n    editAction: function editAction() {\n      var _this2 = this;\n\n      if (this.newActionName != '' && this.newActionTopic != '') {\n        axios.post(config.baseLink + '/action/editAction?actionId=' + this.actionId + '&name=' + encodeURI(this.newActionName) + '&topic=' + encodeURI(this.newActionTopic) + '&message=' + encodeURI(this.newActionMessage) + '&lastEditionId=' + localStorage.getItem(\"WLDDMQ_id\")).then(function (responses) {\n          console.log(_this2.demonstrations[_this2.selectedDemoIndex].action[_this2.actionIndex]);\n\n          _this2.demonstrations[_this2.selectedDemoIndex].action[_this2.actionIndex].parametersTopics.forEach(function (element) {\n            return _this2.tempParameters.push(element);\n          });\n\n          _this2.demonstrations[_this2.selectedDemoIndex].action[_this2.actionIndex].parametersMessages.forEach(function (element) {\n            return _this2.tempParameters.push(element);\n          });\n\n          _this2.$parent.update(function () {\n            _this2.showParamsPopUp('topic', _this2.$parent.demonstrations);\n          });\n\n          _this2.editModal = false;\n        }, function (response) {\n          console.log('erreur', response);\n        });\n      } else {\n        alert('Fill action name and topic!');\n      }\n    },\n    //Permits to show the popUp to fill parameters\n    showParamsPopUp: function showParamsPopUp(type, demonstrations) {\n      var _this3 = this;\n\n      var regex = /\\{\\{[a-zA-Z0-9]*\\}\\}/gm;\n      var matches;\n\n      if (type == 'topic') {\n        matches = this.newActionTopic.matchAll(regex);\n      } else if (type == 'message') {\n        matches = this.newActionMessage.matchAll(regex);\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var match = _step.value;\n\n          _this3.parametersMap.set(match[0], match[0]);\n\n          if (type == 'topic') {\n            _this3.parametersIds.set(match[0], demonstrations[_this3.selectedDemoIndex].action[_this3.selectedActionIndex].parametersTopics.filter(function (element) {\n              return element.parameter == match[0];\n            })[0].id);\n          } else if (type == 'message') {\n            _this3.parametersIds.set(match[0], demonstrations[_this3.selectedDemoIndex].action[_this3.selectedActionIndex].parametersMessages.filter(function (element) {\n              return element.parameter == match[0];\n            })[0].id);\n          }\n        };\n\n        for (var _iterator = matches[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (this.parametersMap.size > 0) {\n        if (type == 'topic') {\n          this.popUpTopic = 1;\n        } else if (type == 'message') {\n          this.popUpMessage = 1;\n        }\n      } else {\n        if (type == 'topic') {\n          this.$parent.update(function () {\n            _this3.showParamsPopUp('message', _this3.$parent.demonstrations);\n          });\n        } else {\n          this.tempParameters = [];\n        }\n      }\n    },\n    //Permits to close editing modal\n    cancelEditModal: function cancelEditModal() {\n      this.editModal = 0;\n      this.newActionName = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].name;\n      this.newActionTopic = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].topic;\n      this.newActionMessage = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].message;\n    },\n    //Permits to close param editing modal\n    closeParamEditing: function closeParamEditing() {\n      this.popUpTopic = 0;\n      this.popUpMessage = 0;\n      this.parametersMap = new HashMap();\n      this.parametersIds = new HashMap();\n      this.newDefaultValues = [];\n    },\n    //Permits to fill default parameter values\n    setDefaultParams: function setDefaultParams(type) {\n      var _this4 = this;\n\n      var toSend = new Array();\n\n      for (var i = 0; i < this.parametersIds.size; i++) {\n        var temp = new Object();\n        temp.id = this.parametersIds.values()[i];\n        temp.value = this.newDefaultValues[i];\n        toSend.push(temp);\n      }\n\n      axios.post(config.baseLink + '/parameters/addAllParametersDefaultValues?jsonString=' + encodeURI(JSON.stringify(toSend))).then(function (responses) {\n        if (type == 'topic') {\n          _this4.$parent.update(function () {\n            _this4.showParamsPopUp('message', _this4.$parent.demonstrations);\n          });\n\n          _this4.closeParamEditing();\n        } else {\n          _this4.$parent.update();\n\n          _this4.closeParamEditing();\n\n          _this4.tempParameters = [];\n        }\n      }, function (response) {\n        console.log('erreur', response);\n      });\n    },\n    //Permits to search existing value for a parameter when editing an action\n    findValueExisting: function findValueExisting(index) {\n      var temp = '';\n\n      for (var i = 0; i < this.tempParameters.length; i++) {\n        if (this.tempParameters[i].parameter == this.parametersMap.keys()[index - 1]) {\n          temp = this.tempParameters[i].parameterDefaultValue;\n          this.parametersMap.set(this.tempParameters[i].parameter, temp);\n          this.newDefaultValues[index - 1] = temp;\n        }\n      }\n\n      return temp;\n    },\n    //Permit to set value for a parameter\n    setValue: function setValue(type, index, $event) {\n      this.parametersMap.set(this.parametersMap.keys()[index - 1], $event);\n\n      if (type == 'topic') {\n        this.$refs.parameterContentTopic[index - 1].value = $event;\n        this.newDefaultValues[index - 1] = $event;\n      } else if (type == 'message') {\n        this.$refs.parameterContentMessage[index - 1].value = $event;\n        this.newDefaultValues[index - 1] = $event;\n      }\n    },\n    exportAction: function exportAction() {\n      var _this5 = this;\n\n      axios.get(config.baseLink + '/action/getActionById?actionId=' + this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].id).then(function (responses) {\n        var jsonAction = responses.data;\n        delete jsonAction.id;\n        jsonAction.parametersTopics.forEach(function (element) {\n          return delete element.id;\n        });\n        jsonAction.parametersMessages.forEach(function (element) {\n          return delete element.id;\n        });\n        var dataStr = JSON.stringify(jsonAction);\n        var dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);\n        var exportFileDefaultName = _this5.demonstrations[_this5.selectedDemoIndex].action[_this5.selectedActionIndex].name + '_action' + '.json';\n        var linkElement = document.createElement('a');\n        linkElement.setAttribute('href', dataUri);\n        linkElement.setAttribute('download', exportFileDefaultName);\n        linkElement.click();\n      }, function (response) {\n        console.log('erreur', response);\n      });\n    },\n    importAction: function importAction(event, demoId) {\n      var reader = new FileReader();\n\n      reader.onload = function (event) {\n        var _this6 = this;\n\n        var jsonObj = JSON.parse(event.target.result);\n        console.log(demoId);\n        axios.post(config.baseLink + '/action/importAction?actionJson=' + encodeURI(JSON.stringify(jsonObj)) + '&demoId=' + demoId).then(function (responses) {\n          _this6.$parent.update();\n\n          _this6.cancelEditModal();\n\n          _this6.importConfirmation = 0;\n        }, function (response) {\n          console.log('erreur', response);\n        });\n      };\n\n      reader.readAsText(event.target.files[0]);\n      event.target.value = '';\n      this.importConfirmation = 1;\n      this.$parent.update();\n      this.cancelEditModal();\n    }\n  }\n};",{"version":3,"sources":["ActionPanel.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <v-flex md9>\r\n        <!--Action panel related to the demonstration choosed by the user-->\r\n        <v-expansion-panel v-model=\"showActionPanel\"   v-if=\"selected!=null\"    >\r\n            <v-expansion-panel-content>\r\n                <template v-slot:header>\r\n                    <div class=\"strongTexts\">Actions</div>\r\n                </template>\r\n\r\n                <v-card>\r\n                    <div class=\"actionsGroup\">\r\n                        <v-flex v-for=\"action in selected.action\"\r\n                                class=\"action\"\r\n                                md3>\r\n                            <v-flex>\r\n                                <v-btn color=rgba(0,103,160,1)\r\n                                       @click=\"assignTopic(action)\"\r\n                                       block>\r\n                                    <div class=\"button\" v-if=\"actionId==action.id\">></div>\r\n                                    <div class=\"button\" style=\"white-space: pre-wrap; font-size: 12px\">{{action.name}}</div>\r\n                                    <div class=\"button\" v-if=\"actionId==action.id\"><</div>\r\n                                </v-btn>\r\n                            </v-flex>\r\n                        </v-flex>\r\n                    </div>\r\n                </v-card>\r\n            </v-expansion-panel-content>\r\n        </v-expansion-panel>\r\n\r\n        <!--Confirmation popUp when deleting an action-->\r\n        <v-dialog v-model=\"deletePopUp\"\r\n                width=\"550\">\r\n            <template v-slot:activator=\"{ on }\">\r\n\r\n            </template>\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    WARNING : Are you sure to delete the action : {{actionName}}\r\n                </v-card-title>\r\n\r\n                <v-card-actions>\r\n                    <v-btn\r\n                            color=\"primary\"\r\n                            flat\r\n                            @click=\"deleteModal=false\">\r\n                        NO\r\n                    </v-btn>\r\n\r\n                    <v-spacer></v-spacer>\r\n                    <v-btn\r\n                            color=\"primary\"\r\n                            flat\r\n                            @click=\"deleteAction()\">\r\n                        YES\r\n                    </v-btn>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-dialog>\r\n\r\n        <!--popUp for editing actions-->\r\n        <v-dialog v-model=\"editModal\"\r\n                  width=\"550\"\r\n                  persistent=\"\">\r\n            <template v-slot:activator=\"{ on }\">\r\n\r\n            </template>\r\n\r\n            <v-card @submit.prevent>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    <div class=\"edit\">\r\n                        Edit action : {{actionName}}\r\n                    </div>\r\n                    <v-spacer></v-spacer>\r\n\r\n                    <div class=\"edit\">Import</div>\r\n                    <v-btn fab small color=\"rgba(0,103,160,1)\" @click=\"$refs.inputUpload.click()\">\r\n\r\n                        <v-icon color=\"white\">\r\n                            cloud_upload\r\n                        </v-icon>\r\n                    </v-btn>\r\n                    <input type=\"file\"\r\n                           ref=\"inputUpload\"\r\n                           id=\"jsonAction\" name=\"jsonAction\"\r\n                           accept=\".json\"\r\n                           v-show=\"false\"\r\n                           @change=\"importAction($event,demonstrations[selectedDemoIndex].id)\">\r\n\r\n                    <div class=\"edit\">Export</div>\r\n                    <v-btn fab small color=\"rgba(0,103,160,1)\" @click=\"exportAction()\">\r\n                        <v-icon color=\"white\">\r\n                            cloud_download\r\n                        </v-icon>\r\n                    </v-btn>\r\n                </v-card-title>\r\n\r\n\r\n                <v-form>\r\n                    <v-text-field\r\n                            label=\"Action Name\"\r\n                            v-model=\"newActionName\"\r\n                            solo>\r\n                    </v-text-field>\r\n\r\n                    <v-text-field\r\n                            label=\"Action Topic\"\r\n                            v-model=\"newActionTopic\"\r\n                            solo>\r\n                    </v-text-field>\r\n\r\n                    <v-textarea\r\n                            label=\"Action Message\"\r\n                            v-model=\"newActionMessage\"\r\n                            solo>\r\n                    </v-textarea>\r\n\r\n                    <v-card-actions>\r\n                        <v-btn\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"cancelEditModal()\">\r\n                            CANCEL\r\n                        </v-btn>\r\n\r\n                        <v-spacer></v-spacer>\r\n\r\n                        <v-btn  type=\"submit\"\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"editAction()\">\r\n                            SAVE\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </v-form>\r\n            </v-card>\r\n        </v-dialog>\r\n\r\n        <!--PopUp permitting to change parameters for the message of the action that we are editing-->\r\n        <v-dialog\r\n                v-model=\"popUpMessage\"\r\n                width=\"500\"\r\n                persistent>\r\n            <template v-slot:activator=\"{ on }\">\r\n\r\n            </template>\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    Fill default parameters for Message\r\n                </v-card-title>\r\n\r\n                </br>\r\n\r\n                <v-form @submit.prevent=\"setDefaultParams('message')\">\r\n                    <v-flex d-flex\r\n                            v-for=\"index in parametersMap.size\">\r\n                        <v-flex md3 offset-md1 offset-xs1>\r\n                            <div class=\"parameters\">\r\n                                {{parametersMap.keys()[index-1]}}\r\n                            </div>\r\n                        </v-flex>\r\n                        <v-flex md6 d-flex>\r\n                            <v-text-field\r\n                                    ref=\"parameterContentMessage\"\r\n                                    @change=\"setValue('message',index,$event)\"\r\n                                    :value=\"findValueExisting(index)\"\r\n                                    solo>\r\n                            </v-text-field>\r\n                        </v-flex>\r\n                    </v-flex>\r\n\r\n                    <v-card-actions>\r\n                        <v-spacer></v-spacer>\r\n\r\n                        <v-btn  type=\"submit\"\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"setDefaultParams('message')\">\r\n                            Apply\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </v-form>\r\n\r\n            </v-card>\r\n        </v-dialog>\r\n\r\n        <!--PopUp permitting to change parameters for the topic of the action that we are editing-->\r\n        <v-dialog\r\n                v-model=\"popUpTopic\"\r\n                width=\"500\"\r\n                persistent=\"\">\r\n            <template v-slot:activator=\"{ on }\">\r\n\r\n            </template>\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    Fill default parameters for Topic\r\n                </v-card-title>\r\n\r\n                </br>\r\n\r\n                <v-form @submit.prevent=\"setDefaultParams('topic')\">\r\n                    <v-flex d-flex\r\n                            v-for=\"index in parametersMap.size\">\r\n                        <v-flex md3 offset-md1 offset-xs1>\r\n                            <div class=\"parameters\">\r\n                                {{parametersMap.keys()[index-1]}}\r\n                            </div>\r\n                        </v-flex>\r\n                        <v-flex md6 d-flex>\r\n                            <v-text-field\r\n                                    ref=\"parameterContentTopic\"\r\n                                    @change=\"setValue('topic',index,$event)\"\r\n                                    :value=\"findValueExisting(index)\"\r\n                                    solo>\r\n                            </v-text-field>\r\n                        </v-flex>\r\n                    </v-flex>\r\n\r\n                    <v-card-actions>\r\n                        <v-spacer></v-spacer>\r\n\r\n                        <v-btn  type=\"submit\"\r\n                                color=\"primary\"\r\n                                flat\r\n                                @click=\"setDefaultParams('topic')\">\r\n                            Apply\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </v-form>\r\n            </v-card>\r\n        </v-dialog>\r\n\r\n        <v-dialog v-model=\"importConfirmation\"\r\n                  width=\"550\">\r\n            <template v-slot:activator=\"{ on }\">\r\n\r\n            </template>\r\n\r\n            <v-card>\r\n                <v-card-title  class=\"headline grey lighten-2\"\r\n                               primary-title>\r\n                    Action Imported!\r\n                </v-card-title>\r\n\r\n                <v-card-actions>\r\n                    <v-btn\r\n                            color=\"primary\"\r\n                            flat\r\n                            @click=\"importConfirmation=0\">\r\n                        Close\r\n                    </v-btn>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-dialog>\r\n    </v-flex>\r\n</template>\r\n\r\n<script>\r\n    import {config} from '@/assets/js/Utils.js';\r\n    import axios from 'axios';\r\n    var HashMap = require('hashmap');\r\n\r\n\r\n    export default {\r\n        name: 'ActionPanel',\r\n        props:{\r\n            'actionPanel':Number,\r\n            'selected': Object,\r\n            'deletePopUp' : Boolean,\r\n            'editPopUp' : Boolean,\r\n            'demonstrations': Array,\r\n            'selectedActionIndex': Number,\r\n            'selectedDemoIndex': Number,\r\n        },\r\n        data:function(){\r\n            return {\r\n                showActionPanel : this.actionPanel,\r\n                deleteModal:this.deletePopUp,\r\n                actionName:null,\r\n                actionId:null,\r\n                editModal : this.editPopUp,\r\n                newActionName:'',\r\n                newActionTopic:'',\r\n                newActionMessage:'',\r\n                parametersMap: new HashMap(),  //Hashmap with all the parameters\r\n                parametersIds: new HashMap(), //Hashmap with parameters Id's\r\n                popUpMessage: 0,//popUp for filling message parameters of the action that wa are editing\r\n                popUpTopic: 0,  //popUp for filling topic parameters of the action that wa are editing\r\n                newDefaultValues:[],  //new default values of the action that we are editing\r\n                actionIndex : this.selectedActionIndex,  //index of the selected action\r\n\r\n                tempParameters : [],                 //copy of default values for the action that we want to edit\r\n                importConfirmation : 0,\r\n            }\r\n        },\r\n        watch:{\r\n            actionPanel:function(){\r\n                this.showActionPanel = this.actionPanel;\r\n            },\r\n            selected:function(){\r\n                this.showActionPanel = 0;\r\n            },\r\n            deletePopUp:function(){\r\n                this.deleteModal = this.deletePopUp;\r\n            },\r\n            deleteModal:function(){\r\n                this.$emit('deletePopUp',this.deleteModal);\r\n            },\r\n            editPopUp:function(){\r\n                this.editModal = this.editPopUp;\r\n                if(this.editModal==true)\r\n                {\r\n                    this.newActionName = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].name;\r\n                    this.newActionTopic = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].topicOriginal;\r\n                    this.newActionMessage = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].messageOriginal;\r\n                }\r\n            },\r\n            editModal:function(){\r\n                this.$emit('editPopUp',this.editModal);\r\n            },\r\n            showActionPanel:function(){\r\n                this.$emit('actionPanel',this.showActionPanel);\r\n            },\r\n            selectedActionIndex:function(){\r\n                this.actionIndex = this.selectedActionIndex;\r\n            },\r\n            actionIndex:function(){\r\n                this.$emit('selectedActionIndex',this.actionIndex);\r\n            }\r\n        },\r\n        methods: {\r\n            //permits to select an action\r\n            assignTopic(action) {\r\n                this.actionName = action.name;\r\n                this.actionId = action.id;\r\n                this.$parent.assignTopic(action);\r\n                this.newActionName = action.name;\r\n                this.newActionTopic = action.topic;\r\n                this.newActionMessage = action.message;\r\n            },\r\n            //permits to delete an action\r\n            deleteAction() {\r\n                axios\r\n                    .post(config.baseLink + '/action/deleteAction?actionId=' + this.actionId)\r\n                    .then((responses) => {\r\n                        this.$parent.update();\r\n                        this.deleteModal = false;\r\n                        this.newActionName = '';\r\n                        this.newActionMessage = '';\r\n                        this.newActionTopic = '';\r\n                        this.actionIndex = null;\r\n                    }, (response) => {\r\n                        console.log('erreur', response)\r\n                    })\r\n            },\r\n            //Permits to Add a new action for a demonstration\r\n            editAction() {\r\n                if(this.newActionName!=''&&this.newActionTopic!='')\r\n                {\r\n                    axios\r\n                        .post(config.baseLink + '/action/editAction?actionId=' + this.actionId + '&name=' + encodeURI(this.newActionName) + '&topic=' + encodeURI(this.newActionTopic) + '&message=' + encodeURI(this.newActionMessage)+'&lastEditionId='+localStorage.getItem(\"WLDDMQ_id\"))\r\n                        .then((responses) => {\r\n                            console.log(this.demonstrations[this.selectedDemoIndex].action[this.actionIndex]);\r\n                            this.demonstrations[this.selectedDemoIndex].action[this.actionIndex].parametersTopics.forEach(element => this.tempParameters.push(element));\r\n                            this.demonstrations[this.selectedDemoIndex].action[this.actionIndex].parametersMessages.forEach(element => this.tempParameters.push(element));\r\n                            this.$parent.update(() => {\r\n                                this.showParamsPopUp('topic', this.$parent.demonstrations);\r\n                            });\r\n                            this.editModal = false;\r\n                        }, (response) => {\r\n                            console.log('erreur', response)\r\n                        })\r\n                }\r\n                else{\r\n                    alert('Fill action name and topic!')\r\n                }\r\n\r\n            },\r\n            //Permits to show the popUp to fill parameters\r\n            showParamsPopUp(type, demonstrations) {\r\n                const regex = /\\{\\{[a-zA-Z0-9]*\\}\\}/gm;\r\n                let matches;\r\n                if (type == 'topic') {\r\n                    matches = this.newActionTopic.matchAll(regex);\r\n                } else if (type == 'message') {\r\n                    matches = this.newActionMessage.matchAll(regex);\r\n                }\r\n                for (const match of matches) {\r\n                    this.parametersMap.set(match[0], match[0]);\r\n                    if (type == 'topic') {\r\n                        this.parametersIds.set(match[0], demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].parametersTopics.filter(element => element.parameter == match[0])[0].id);\r\n                    } else if (type == 'message') {\r\n                        this.parametersIds.set(match[0], demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].parametersMessages.filter(element => element.parameter == match[0])[0].id);\r\n                    }\r\n                }\r\n                if (this.parametersMap.size > 0) {\r\n                    if (type == 'topic') {\r\n                        this.popUpTopic = 1;\r\n                    } else if (type == 'message') {\r\n                        this.popUpMessage = 1;\r\n                    }\r\n                } else {\r\n                    if (type == 'topic') {\r\n                        this.$parent.update(() => {\r\n                            this.showParamsPopUp('message', this.$parent.demonstrations);\r\n                        });\r\n                    }else{\r\n                        this.tempParameters = [];\r\n\r\n                    }\r\n                }\r\n            },\r\n            //Permits to close editing modal\r\n            cancelEditModal() {\r\n                this.editModal = 0;\r\n                this.newActionName = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].name;\r\n                this.newActionTopic = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].topic;\r\n                this.newActionMessage = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].message;\r\n            },\r\n            //Permits to close param editing modal\r\n            closeParamEditing() {\r\n                this.popUpTopic = 0;\r\n                this.popUpMessage = 0;\r\n                this.parametersMap = new HashMap();\r\n                this.parametersIds = new HashMap();\r\n                this.newDefaultValues = [];\r\n            },\r\n            //Permits to fill default parameter values\r\n            setDefaultParams(type)\r\n            {\r\n                var toSend = new Array();\r\n                for (var i = 0; i < this.parametersIds.size; i++) {\r\n                    var temp = new Object();\r\n                    temp.id = this.parametersIds.values()[i];\r\n                    temp.value = this.newDefaultValues[i];\r\n                    toSend.push(temp);\r\n                }\r\n                axios\r\n                    .post(config.baseLink + '/parameters/addAllParametersDefaultValues?jsonString='+encodeURI(JSON.stringify(toSend)))\r\n                    .then((responses) => {\r\n                        if (type == 'topic') {\r\n                            this.$parent.update(() => {\r\n                                this.showParamsPopUp('message', this.$parent.demonstrations);\r\n                            });\r\n                            this.closeParamEditing();\r\n                        } else {\r\n                            this.$parent.update();\r\n                            this.closeParamEditing();\r\n                            this.tempParameters = [];\r\n                        }\r\n                    }, (response) => {\r\n                        console.log('erreur', response)\r\n                    })\r\n            },\r\n            //Permits to search existing value for a parameter when editing an action\r\n            findValueExisting(index){\r\n                var temp='';\r\n                for(var i=0;i<this.tempParameters.length;i++){\r\n                    if(this.tempParameters[i].parameter==this.parametersMap.keys()[index-1]){\r\n                        temp = this.tempParameters[i].parameterDefaultValue;\r\n                        this.parametersMap.set(this.tempParameters[i].parameter,temp);\r\n                        this.newDefaultValues[index-1] = temp;\r\n                    }\r\n                }\r\n                return temp;\r\n            },\r\n            //Permit to set value for a parameter\r\n            setValue(type,index,$event){\r\n                this.parametersMap.set(this.parametersMap.keys()[index-1],$event);\r\n                if(type=='topic'){\r\n                    this.$refs.parameterContentTopic[index-1].value=$event;\r\n                    this.newDefaultValues[index-1] = $event;\r\n                }\r\n                else if(type=='message')\r\n                {\r\n                    this.$refs.parameterContentMessage[index-1].value=$event;\r\n                    this.newDefaultValues[index-1] = $event;\r\n                }\r\n            },\r\n            exportAction(){\r\n                axios\r\n                    .get(config.baseLink +'/action/getActionById?actionId='+this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].id)\r\n                    .then((responses) => {\r\n                        let jsonAction = responses.data;\r\n                        delete jsonAction.id;\r\n                        jsonAction.parametersTopics.forEach(element => delete element.id);\r\n                        jsonAction.parametersMessages.forEach(element => delete element.id);\r\n                        let dataStr = JSON.stringify(jsonAction);\r\n                        let dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\r\n                        let exportFileDefaultName = this.demonstrations[this.selectedDemoIndex].action[this.selectedActionIndex].name+'_action'+'.json';\r\n                        let linkElement = document.createElement('a');\r\n                        linkElement.setAttribute('href', dataUri);\r\n                        linkElement.setAttribute('download', exportFileDefaultName);\r\n                        linkElement.click();\r\n                    }, (response) => {\r\n                        console.log('erreur', response)\r\n                    })\r\n            },\r\n            importAction(event,demoId){\r\n                var reader = new FileReader();\r\n                reader.onload = function(event) {\r\n                    var jsonObj = JSON.parse(event.target.result);\r\n                    console.log(demoId)\r\n                    axios\r\n                        .post(config.baseLink + '/action/importAction?actionJson='+ encodeURI(JSON.stringify(jsonObj))+'&demoId='+demoId)\r\n                        .then((responses) => {\r\n                            this.$parent.update();\r\n                            this.cancelEditModal();\r\n                            this.importConfirmation = 0;\r\n                        }, (response) => {\r\n                            console.log('erreur', response)\r\n                        })\r\n                }\r\n                reader.readAsText(event.target.files[0]);\r\n                event.target.value = '';\r\n                this.importConfirmation = 1;\r\n                this.$parent.update();\r\n                this.cancelEditModal();\r\n            }\r\n        }\r\n    }\r\n</script>\r\n"],"sourceRoot":"src/components"}]}