package com.worldline.wldd.mq.ws.demonstrations.controllers;

import com.fasterxml.jackson.annotation.JsonView;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.worldline.wldd.mq.ws.demonstrations.entities.Demo;
import com.worldline.wldd.mq.ws.actions.entities.Action;
import com.worldline.wldd.mq.ws.demonstrations.repositories.DemoRepository;
import com.worldline.wldd.mq.ws.actions.repositories.ActionRepository;
import com.worldline.wldd.mq.ws.parameters.repositories.ParametersRepository;
import com.worldline.wldd.mq.ws.users.repositories.UserRepository;
import com.worldline.wldd.mq.ws.parameters.entities.Parameters;
import com.worldline.wldd.mq.ws.tools.FormatedMessage;
import com.worldline.wldd.mq.ws.users.entities.UserGroups;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.transaction.Transactional;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class DemoController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private DemoRepository demoRepository;

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ActionRepository actionRepository;

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ParametersRepository parametersRepository;

    @PostMapping(path="/addDemo") // Map ONLY GET Requests
    public @ResponseBody
    String addNewDemo (@RequestParam String name,@RequestParam String userGroupsIds, @RequestParam Integer adminId) {
        Demo demo = new Demo();
        List<UserGroups> users = new ArrayList<>();
        demo.setName(name);
        String[] result = userGroupsIds.split("\\|");
        for(int i=0;i<result.length;i++) {
            if(userRepository.findById(Integer.parseInt(result[i])).isPresent()) {
                users.add(userRepository.findById(Integer.parseInt(result[i])).get());
            }
        }
        demo.setUser(users);
        demo.setAdminId(adminId);
        demoRepository.save(demo);
        return FormatedMessage.errorMessage(false);
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Demo> getAllUsers() {
        // This returns a JSON or XML with the users
        return demoRepository.findAll();
    }

    @GetMapping(path="/findByName")
    public @ResponseBody Demo findByName(@RequestParam String name) {
        // This returns a JSON or XML with the users
        return demoRepository.findByName(name);
    }

    @GetMapping(path="/findActionsByDemoId")
    public @ResponseBody List<Action> findActionsByDemoId(@RequestParam Integer demoId) {
        // This returns a JSON or XML with the users
        Optional<Demo> demo = demoRepository.findById(demoId);
        return demo.get().getAction();
    }

    @GetMapping(path="/findByUserGroupId")
    public @ResponseBody List<Demo> findByUserGroupId(@RequestParam Integer userGroupId){
        Iterable<Demo> demos = demoRepository.findAll();
        List<Demo> demoList = new ArrayList<>();
        UserGroups userGroup = userRepository.findById(userGroupId).get();
        List<UserGroups> usersDemo = new ArrayList<>();
        for(Demo demo : demos){
            usersDemo = demo.getUser();
            for(UserGroups user : usersDemo) {
                if(user == userGroup) {
                    demoList.add(demo);
                }
            }
        }
        return demoList;
    }

    @PostMapping(path="/deleteDemo")
    public @ResponseBody String deleteDemo(@RequestParam Integer demoId){
        if(demoRepository.findById(demoId).isPresent()){
            demoRepository.deleteById(demoId);
            return FormatedMessage.errorMessage(false);
        }
        return FormatedMessage.errorMessage(true);
    }

    @Transactional
    @PostMapping(path="/editDemo") // Map ONLY GET Requests
    public @ResponseBody
    String editDemo (@RequestParam Integer demoId, @RequestParam String name, @RequestParam String userGroupsIds) {
        if(demoRepository.findById(demoId).isPresent())
        {
            List<UserGroups> users = new ArrayList<>();
            String[] result = userGroupsIds.split("\\|");
            for(int i=0;i<result.length;i++) {
                if(userRepository.findById(Integer.parseInt(result[i])).isPresent()) {
                    users.add(userRepository.findById(Integer.parseInt(result[i])).get());
                }
            }
            demoRepository.findById(demoId).get().setUser(users);
            demoRepository.findById(demoId).get().setName(name);
            return FormatedMessage.errorMessage(false);
        }
        return FormatedMessage.errorMessage(true);
    }

    @GetMapping(path="/getDemo")
    public @ResponseBody
    Demo getDemo(@RequestParam Integer demoId){
        return demoRepository.findById(demoId).get();
    }

    @PostMapping(path="/importDemo")
    @ResponseBody
    String importDemo(@RequestParam String demoJson){
        Gson gson = new Gson();
        JsonParser jsonParser = new JsonParser();
        JsonObject jsonObject = jsonParser.parse(demoJson).getAsJsonObject();
        String name = jsonObject.get("name").getAsString();
        Integer demoAdminId = jsonObject.get("adminId").getAsInt();
        JsonArray usersJsonArray = jsonObject.get("user").getAsJsonArray();
        List<UserGroups> users = new ArrayList<>();
        Integer demoNumber = 1;
        while(demoRepository.findByName(name)!=null){
            name = name + String.valueOf(demoNumber);
            demoNumber = demoNumber +1;
        }
        for(int i = 0 ; i < usersJsonArray.size();i++){
            users.add(userRepository.findById(gson.fromJson(usersJsonArray.get(i),UserGroups.class).getId()).get());
        }
        JsonArray actionsJsonArray = jsonObject.get("action").getAsJsonArray();
        List<Action> actions = new ArrayList<>();
        for(int i = 0 ; i < actionsJsonArray.size();i++){
            List<Parameters> parametersTopic = new ArrayList<>();
            List<Parameters> parametersMessage = new ArrayList<>();

            JsonArray parametersJsonArrayTopic = actionsJsonArray.get(i).getAsJsonObject().get("parametersTopics").getAsJsonArray();
            JsonArray parametersJsonArrayMessage = actionsJsonArray.get(i).getAsJsonObject().get("parametersMessages").getAsJsonArray();
            for(int j=0;j<parametersJsonArrayTopic.size();j++){
                Parameters tempParameter = gson.fromJson(parametersJsonArrayTopic.get(j),Parameters.class);
                tempParameter = parametersRepository.save(tempParameter);
                parametersTopic.add(tempParameter);
            }
            for(int k=0;k<parametersJsonArrayMessage.size();k++){
                Parameters tempParameter2 = gson.fromJson(parametersJsonArrayMessage.get(k),Parameters.class);
                tempParameter2 = parametersRepository.save(tempParameter2);
                parametersMessage.add(tempParameter2);
            }
            String actionName = actionsJsonArray.get(i).getAsJsonObject().get("name").getAsString();
            String topic = actionsJsonArray.get(i).getAsJsonObject().get("topic").getAsString();
            String message = actionsJsonArray.get(i).getAsJsonObject().get("message").getAsString();
            Integer sort = actionsJsonArray.get(i).getAsJsonObject().get("sort").getAsInt();
            Integer actionAdminId = actionsJsonArray.get(i).getAsJsonObject().get("adminId").getAsInt();
            Integer lastEditionId = actionsJsonArray.get(i).getAsJsonObject().get("lastEditionId").getAsInt();
            Action tempAction = new Action();
            tempAction.setName(actionName);
            tempAction.setTopic(topic);
            tempAction.setMessage(message);
            tempAction.setSort(sort);
            tempAction.setAdminId(actionAdminId);
            tempAction.setLastEditionId(lastEditionId);
            tempAction.setLastEditionDate(new Date());
            tempAction.setParametersTopics(parametersTopic);
            tempAction.setParametersMessages(parametersMessage);
            tempAction = actionRepository.save(tempAction);
            actions.add(tempAction);
        }
        Demo demo = new Demo();
        demo.setName(name);
        demo.setUser(users);
        demo.setAction(actions);
        demo.setAdminId(demoAdminId);
        demoRepository.save(demo);
        return FormatedMessage.errorMessage(false);
    }
}