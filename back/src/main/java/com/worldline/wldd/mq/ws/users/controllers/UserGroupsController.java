package com.worldline.wldd.mq.ws.users.controllers;

import com.worldline.wldd.mq.ws.demonstrations.repositories.DemoRepository;
import com.worldline.wldd.mq.ws.tools.FormatedMessage;
import com.worldline.wldd.mq.ws.users.entities.UserGroups;
import com.worldline.wldd.mq.ws.users.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserGroupsController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired // This means to get the bean called userRepository
    private DemoRepository demoRepository;


    @GetMapping(path="/addUser") // Map ONLY GET Requests
    public @ResponseBody
    String addNewUser (@RequestParam String name) {
        if(userRepository.findByName(name)==null)
        {
            UserGroups user = new UserGroups();
            user.setName(name);
            userRepository.save(user);
            return FormatedMessage.errorMessage(false);
        }
        return FormatedMessage.errorMessage(true);
    }

    @GetMapping(path="/findByGroup") // Map ONLY GET Requests
    public @ResponseBody
    UserGroups findByName(@RequestParam String name) {
        return userRepository.findByName(name);
    }

    @GetMapping(path="/findAll")
    public @ResponseBody
    Iterable<UserGroups> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

}
